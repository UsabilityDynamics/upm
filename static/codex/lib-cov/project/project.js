/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['project/project.js']) {
  _$jscoverage['project/project.js'] = [];
  _$jscoverage['project/project.js'][16] = 0;
  _$jscoverage['project/project.js'][19] = 0;
  _$jscoverage['project/project.js'][20] = 0;
  _$jscoverage['project/project.js'][23] = 0;
  _$jscoverage['project/project.js'][24] = 0;
  _$jscoverage['project/project.js'][27] = 0;
  _$jscoverage['project/project.js'][28] = 0;
  _$jscoverage['project/project.js'][31] = 0;
  _$jscoverage['project/project.js'][34] = 0;
  _$jscoverage['project/project.js'][42] = 0;
  _$jscoverage['project/project.js'][55] = 0;
  _$jscoverage['project/project.js'][56] = 0;
  _$jscoverage['project/project.js'][57] = 0;
  _$jscoverage['project/project.js'][60] = 0;
  _$jscoverage['project/project.js'][63] = 0;
  _$jscoverage['project/project.js'][64] = 0;
  _$jscoverage['project/project.js'][68] = 0;
  _$jscoverage['project/project.js'][78] = 0;
  _$jscoverage['project/project.js'][115] = 0;
  _$jscoverage['project/project.js'][116] = 0;
  _$jscoverage['project/project.js'][119] = 0;
  _$jscoverage['project/project.js'][120] = 0;
  _$jscoverage['project/project.js'][121] = 0;
  _$jscoverage['project/project.js'][122] = 0;
  _$jscoverage['project/project.js'][124] = 0;
  _$jscoverage['project/project.js'][128] = 0;
  _$jscoverage['project/project.js'][143] = 0;
  _$jscoverage['project/project.js'][144] = 0;
  _$jscoverage['project/project.js'][145] = 0;
  _$jscoverage['project/project.js'][146] = 0;
  _$jscoverage['project/project.js'][147] = 0;
  _$jscoverage['project/project.js'][148] = 0;
  _$jscoverage['project/project.js'][149] = 0;
  _$jscoverage['project/project.js'][150] = 0;
  _$jscoverage['project/project.js'][156] = 0;
  _$jscoverage['project/project.js'][160] = 0;
  _$jscoverage['project/project.js'][162] = 0;
  _$jscoverage['project/project.js'][163] = 0;
  _$jscoverage['project/project.js'][166] = 0;
  _$jscoverage['project/project.js'][168] = 0;
  _$jscoverage['project/project.js'][170] = 0;
  _$jscoverage['project/project.js'][172] = 0;
  _$jscoverage['project/project.js'][174] = 0;
  _$jscoverage['project/project.js'][176] = 0;
  _$jscoverage['project/project.js'][177] = 0;
  _$jscoverage['project/project.js'][179] = 0;
  _$jscoverage['project/project.js'][180] = 0;
  _$jscoverage['project/project.js'][181] = 0;
  _$jscoverage['project/project.js'][183] = 0;
  _$jscoverage['project/project.js'][184] = 0;
  _$jscoverage['project/project.js'][185] = 0;
  _$jscoverage['project/project.js'][186] = 0;
  _$jscoverage['project/project.js'][187] = 0;
  _$jscoverage['project/project.js'][212] = 0;
  _$jscoverage['project/project.js'][213] = 0;
  _$jscoverage['project/project.js'][214] = 0;
  _$jscoverage['project/project.js'][215] = 0;
  _$jscoverage['project/project.js'][216] = 0;
  _$jscoverage['project/project.js'][217] = 0;
  _$jscoverage['project/project.js'][220] = 0;
  _$jscoverage['project/project.js'][226] = 0;
  _$jscoverage['project/project.js'][227] = 0;
  _$jscoverage['project/project.js'][231] = 0;
  _$jscoverage['project/project.js'][234] = 0;
  _$jscoverage['project/project.js'][236] = 0;
  _$jscoverage['project/project.js'][241] = 0;
  _$jscoverage['project/project.js'][243] = 0;
  _$jscoverage['project/project.js'][255] = 0;
  _$jscoverage['project/project.js'][256] = 0;
  _$jscoverage['project/project.js'][259] = 0;
  _$jscoverage['project/project.js'][260] = 0;
  _$jscoverage['project/project.js'][263] = 0;
  _$jscoverage['project/project.js'][264] = 0;
  _$jscoverage['project/project.js'][267] = 0;
  _$jscoverage['project/project.js'][268] = 0;
  _$jscoverage['project/project.js'][273] = 0;
  _$jscoverage['project/project.js'][274] = 0;
  _$jscoverage['project/project.js'][278] = 0;
  _$jscoverage['project/project.js'][279] = 0;
  _$jscoverage['project/project.js'][280] = 0;
  _$jscoverage['project/project.js'][283] = 0;
  _$jscoverage['project/project.js'][289] = 0;
  _$jscoverage['project/project.js'][290] = 0;
  _$jscoverage['project/project.js'][291] = 0;
  _$jscoverage['project/project.js'][297] = 0;
  _$jscoverage['project/project.js'][313] = 0;
  _$jscoverage['project/project.js'][326] = 0;
  _$jscoverage['project/project.js'][332] = 0;
  _$jscoverage['project/project.js'][342] = 0;
}
_$jscoverage['project/project.js'][16]++;
function Project(directory, options) {
  _$jscoverage['project/project.js'][19]++;
  if (! (this instanceof Project)) {
    _$jscoverage['project/project.js'][20]++;
    return new Project(directory, options);
  }
  _$jscoverage['project/project.js'][23]++;
  require("object-emitter").mixin(this);
  _$jscoverage['project/project.js'][24]++;
  require("object-settings").mixin(this);
  _$jscoverage['project/project.js'][27]++;
  this.set("directory", directory || process.cwd());
  _$jscoverage['project/project.js'][28]++;
  this.set("options", options || {});
  _$jscoverage['project/project.js'][31]++;
  this.load();
  _$jscoverage['project/project.js'][34]++;
  return this;
}
_$jscoverage['project/project.js'][42]++;
Object.defineProperties(Project.prototype, {load: {value: (function load() {
  _$jscoverage['project/project.js'][55]++;
  var extend = require("extend");
  _$jscoverage['project/project.js'][56]++;
  var basename = require("path").basename;
  _$jscoverage['project/project.js'][57]++;
  var dirname = require("path").dirname;
  _$jscoverage['project/project.js'][60]++;
  var _component = Project.utility.resolve(this.get("directory"), "component.json");
  _$jscoverage['project/project.js'][63]++;
  if (! _component) {
    _$jscoverage['project/project.js'][64]++;
    return ({});
  }
  _$jscoverage['project/project.js'][68]++;
  var config = extend({repository: {}, dependencies: {}, remotes: [], paths: [], local: []}, require(_component));
  _$jscoverage['project/project.js'][78]++;
  Object.defineProperties(this, {name: {value: config.name, enumerable: true, configurable: true, writable: true}, version: {value: config.version, enumerable: true, configurable: true, writable: true}, repository: {value: config.repository, enumerable: true, configurable: true, writable: true}, username: {value: basename(dirname(config.repository.url)) || "component", enumerable: true, configurable: true, writable: true}, directory: {value: dirname(Project.utility.resolve("component.json"))}, dependencies: {value: [], enumerable: false, configurable: true, writable: true}});
  _$jscoverage['project/project.js'][115]++;
  this.dependencies = this.dependencies.concat(Project.utility.normalize(config.dependencies));
  _$jscoverage['project/project.js'][116]++;
  this.dependencies = this.dependencies.concat(Project.utility.normalize(config.development));
  _$jscoverage['project/project.js'][119]++;
  config.local.forEach((function (pkg) {
  _$jscoverage['project/project.js'][120]++;
  try {
    _$jscoverage['project/project.js'][121]++;
    component.dependenciesOf(pkg, config.paths).map(Project.utility.normalize).forEach((function (deps) {
  _$jscoverage['project/project.js'][122]++;
  this.dependencies = this.dependencies.concat(deps);
}));
  }
  catch (err) {
    _$jscoverage['project/project.js'][124]++;
    console.error(err.message);
  }
}));
  _$jscoverage['project/project.js'][128]++;
  return this;
}), enumerable: false}, create: {value: (function create(options) {
  _$jscoverage['project/project.js'][143]++;
  var dirname = require("path").dirname;
  _$jscoverage['project/project.js'][144]++;
  var join = require("path").join;
  _$jscoverage['project/project.js'][145]++;
  var read = require("fs").read;
  _$jscoverage['project/project.js'][146]++;
  var fs = require("fs");
  _$jscoverage['project/project.js'][147]++;
  var path = require("path");
  _$jscoverage['project/project.js'][148]++;
  var prompt = require("prompt");
  _$jscoverage['project/project.js'][149]++;
  var mustache = require("mustache");
  _$jscoverage['project/project.js'][150]++;
  var wrench = require("wrench");
  _$jscoverage['project/project.js'][156]++;
  return this;
  _$jscoverage['project/project.js'][160]++;
  var json = this.get("template.path") || "wordpress-plugin.json";
  _$jscoverage['project/project.js'][162]++;
  if (! read(json)) {
    _$jscoverage['project/project.js'][163]++;
    throw Error("wordpress-plugin.json not found");
  }
  _$jscoverage['project/project.js'][166]++;
  var config = JSON.parse(read(json, "utf8").toString().replace(/\n/g, ""));
  _$jscoverage['project/project.js'][168]++;
  prompt.start();
  _$jscoverage['project/project.js'][170]++;
  prompt.get(config, (function (err, result) {
  _$jscoverage['project/project.js'][172]++;
  var tpls = config.tpl || {};
  _$jscoverage['project/project.js'][174]++;
  Object.keys(tpls).forEach((function (tpl) {
  _$jscoverage['project/project.js'][176]++;
  var dist = mustache.render(tpls[tpl], result);
  _$jscoverage['project/project.js'][177]++;
  var distDir = dirname(dist);
  _$jscoverage['project/project.js'][179]++;
  if (fs.statSync(tpl).isFile()) {
    _$jscoverage['project/project.js'][180]++;
    wrench.mkdirSyncRecursive(distDir);
    _$jscoverage['project/project.js'][181]++;
    fs.writeFileSync(dist, mustache.render(fs.read(tpl, "utf-8"), result));
  }
  else {
    _$jscoverage['project/project.js'][183]++;
    wrench.mkdirSyncRecursive(distDir);
    _$jscoverage['project/project.js'][184]++;
    wrench.copyDirSyncRecursive(tpl, dist);
    _$jscoverage['project/project.js'][185]++;
    wrench.readdirSyncRecursive(dist).forEach((function (file) {
  _$jscoverage['project/project.js'][186]++;
  file = path.join(dist, file);
  _$jscoverage['project/project.js'][187]++;
  fs.writeFileSync(file, mustache.render(fs.read(file, "utf-8"), result), "utf-8");
}));
  }
}));
}));
}), configurable: true, enumerable: true, writable: true}, update: {value: (function update(options) {
  _$jscoverage['project/project.js'][212]++;
  var project = this;
  _$jscoverage['project/project.js'][213]++;
  var extend = require("extend");
  _$jscoverage['project/project.js'][214]++;
  var async = require("async");
  _$jscoverage['project/project.js'][215]++;
  var util = require("util");
  _$jscoverage['project/project.js'][216]++;
  var path = require("path");
  _$jscoverage['project/project.js'][217]++;
  var fs = require("fs");
  _$jscoverage['project/project.js'][220]++;
  options = extend({force: false, dest: "components"}, options);
  _$jscoverage['project/project.js'][226]++;
  if (! this.dependencies || this.dependencies.length === 0) {
    _$jscoverage['project/project.js'][227]++;
    return project.emit("error", new Error(util.format("Project [%s] has no dependencies.", this.directory)));
  }
  _$jscoverage['project/project.js'][231]++;
  project.emit("message", "Starting update [%d] dependencies on [%s] project.", this.dependencies.length, this.directory);
  _$jscoverage['project/project.js'][234]++;
  async.each(this.dependencies, (function iterator(dep, next) {
  _$jscoverage['project/project.js'][236]++;
  dep = {name: dep.split("@")[0], version: dep.split("@")[1] || "master"};
  _$jscoverage['project/project.js'][241]++;
  project.emit("message", "Updating dependencies for [%s] package.", dep.name);
  _$jscoverage['project/project.js'][243]++;
  var package = new Project.Package({name: dep.name, version: dep.version, dest: options.dest, force: options.force, remotes: ["https://raw.github.com", "https://repository.usabilitydynamics.com"], concurrency: 10});
  _$jscoverage['project/project.js'][255]++;
  package.on("file", (function (file, url) {
  _$jscoverage['project/project.js'][256]++;
  project.emit("verbose", "Installed a [%s] file for [%s].", file, dep.name);
}));
  _$jscoverage['project/project.js'][259]++;
  package.on("dep", (function (component) {
  _$jscoverage['project/project.js'][260]++;
  project.emit("verbose", "Fetching dependency [%s] for [%s].", component.name, dep.name);
}));
  _$jscoverage['project/project.js'][263]++;
  package.on("installing", (function (data) {
  _$jscoverage['project/project.js'][264]++;
  project.emit("message", "Installing [%s].", dep.name);
}));
  _$jscoverage['project/project.js'][267]++;
  package.on("error", (function (error) {
  _$jscoverage['project/project.js'][268]++;
  console.log("FUCK", error.message);
}));
  _$jscoverage['project/project.js'][273]++;
  package.on("exists", (function (data) {
  _$jscoverage['project/project.js'][274]++;
  project.emit("verbose", "Dependency [%s] already exists.", dep.name);
}));
  _$jscoverage['project/project.js'][278]++;
  package.on("end", (function (data) {
  _$jscoverage['project/project.js'][279]++;
  project.emit("message", "Installed dependency [%s] for project [%s].", dep.name, project.name);
  _$jscoverage['project/project.js'][280]++;
  next(null);
}));
  _$jscoverage['project/project.js'][283]++;
  process.nextTick((function () {
}));
}), (function updated(error) {
  _$jscoverage['project/project.js'][289]++;
  process.nextTick((function () {
  _$jscoverage['project/project.js'][290]++;
  project.emit("message", "Project's [%d] dependencies have been udpated.", project.dependencies.length);
  _$jscoverage['project/project.js'][291]++;
  project.emit("updated", error);
}));
}));
  _$jscoverage['project/project.js'][297]++;
  return this;
}), configurable: true, enumerable: true, writable: true}, install: {value: (function install(name) {
  _$jscoverage['project/project.js'][313]++;
  return this;
}), enumerable: true, configurable: false, writable: false}, is_repository: {value: undefined, enumerable: true}, have_dependencies: {get: (function () {
  _$jscoverage['project/project.js'][326]++;
  return Object.keys(this.dependencies).length? true: false;
}), enumerable: true}, is_valid: {get: (function () {
  _$jscoverage['project/project.js'][332]++;
  return this.name && this.version? true: false;
}), enumerable: true}});
_$jscoverage['project/project.js'][342]++;
Object.defineProperties(module.exports = Project, {Package: {value: require("../package/package"), enumerable: true, configurable: true}, utility: {value: require("../utility"), enumerable: false, configurable: true}});
_$jscoverage['project/project.js'].source = ["/**"," * Instantiate a Project"," *"," * ## Events"," * - message (arg1, arv2): Important message."," * - updated (error): Project has been updated."," *"," * @param directory {String} Path to project directory, otherwise assumes current."," * @param options {Object} Project options that may be used to overwrite component.json settings."," *"," * @returns {Object} Returns instance."," * @method Project"," *"," * @constructor"," */","function Project( directory, options ) {","","  // Force property instantiation.","  if( !(this instanceof Project ) ) {","    return new Project( directory, options );","  }","","  require( 'object-emitter' ).mixin( this );","  require( 'object-settings' ).mixin( this );","","  // Commit to options meta.","  this.set( 'directory', directory || process.cwd() );","  this.set( 'options', options || {} );","","  // Load project settings.","  this.load();","","  // @chainable","  return this;","","}","","/**"," * Instance Properties."," *"," */","Object.defineProperties( Project.prototype, {","  load: {","    /**","     * Load Project.","     *","     * @private","     * @chainable","     * @method load","     * @for Project","     */","    value: function load() {","      // Project.debug( 'Loading [%s] project.', options.directory );","","      var extend      = require( 'extend' );","      var basename    = require( 'path' ).basename;","      var dirname     = require( 'path' ).dirname;","","      // Locate component.json; fallback to packave.json","      var _component  = Project.utility.resolve( this.get( 'directory' ), 'component.json' );","","      // @todo Throw error unless sufficient information available in meta:options to create a new project.","      if( !_component ) {","        return {}","      }","","      // Get object with defaults.","      var config = extend({","        repository: {},","        dependencies: {},","        remotes: [],","        paths: [],","        local: []","      }, require( _component ) )","","","      // Add computed properties.","      Object.defineProperties( this, {","        name: {","          value: config.name,","          enumerable: true,","          configurable: true,","          writable: true","        },","        version: {","          value: config.version,","          enumerable: true,","          configurable: true,","          writable: true","        },","        repository: {","          value: config.repository,","          enumerable: true,","          configurable: true,","          writable: true","        },","        username: {","          value: basename( dirname( config.repository.url ) ) || 'component',","          enumerable: true,","          configurable: true,","          writable: true","        },","        directory: {","          value: dirname( Project.utility.resolve( 'component.json' ) )","        },","        dependencies: {","          value: [],","          enumerable: false,","          configurable: true,","          writable: true","        }","      })","","      // Normalize package references and add to aggregated array.","      this.dependencies = this.dependencies.concat( Project.utility.normalize( config.dependencies ) );","      this.dependencies = this.dependencies.concat( Project.utility.normalize( config.development ) );","","      // Check local packages.","      config.local.forEach( function( pkg ) {","        try {","          component.dependenciesOf( pkg, config.paths ).map( Project.utility.normalize ).forEach( function(deps){","            this.dependencies = this.dependencies.concat( deps );","          });","        } catch (err) { console.error( err.message ); }","      });","","      // @chainable","      return this;","","    },","    enumerable: false","  },","  create: {","    /**","     * Create new project with scaffolding.","     *","     * @method create","     * @for Project","     */","    value: function create( options ) {","      // Project.debug( 'Creating project [%s].', this.directory );","","      var dirname     = require( 'path' ).dirname;","      var join        = require( 'path' ).join;","      var read        = require( 'fs' ).read;","      var fs          = require( 'fs' );","      var path        = require( 'path' );","      var prompt      = require( 'prompt' );","      var mustache    = require( 'mustache' );","      var wrench      = require( 'wrench' );","","      // project.emit( 'message', 'Project [%d] created.', this.name );","      // project.emit( 'created', null );","","      // @chainable","      return this;","","      // this.set( 'template.path', join( dirname( module.filename ), 'templates', this.get( 'options.type' ) ) );","","      var json = this.get( 'template.path' ) || 'wordpress-plugin.json';","","      if ( !read( json ) ) {","        throw Error( \"wordpress-plugin.json not found\" );","      }","","      var config = JSON.parse( read( json, 'utf8' ).toString().replace( /\\n/g, '' ) );","","      prompt.start();","","      prompt.get( config, function ( err, result ) {","","        var tpls = config.tpl || {};","","        Object.keys( tpls ).forEach( function ( tpl ) {","","          var dist = mustache.render( tpls[tpl], result );","          var distDir = dirname( dist );","","          if ( fs.statSync( tpl ).isFile() ) {","            wrench.mkdirSyncRecursive( distDir );","            fs.writeFileSync( dist, mustache.render( fs.read( tpl, 'utf-8' ), result ) );","          } else {","            wrench.mkdirSyncRecursive( distDir );","            wrench.copyDirSyncRecursive( tpl, dist );","            wrench.readdirSyncRecursive( dist ).forEach( function ( file ) {","              file = path.join( dist, file );","              fs.writeFileSync( file, mustache.render( fs.read( file, 'utf-8' ), result ), 'utf-8' );","            });","          }","","        });","","      });","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  update: {","    /**","     * Update Project","     *","     * @todo Add a queue so callback can be triggered when all dependencies are done.","     *","     * @chainable","     * @method update","     * @for Project","     */","    value: function update( options ) {","","      var project   = this;","      var extend    = require( 'extend' );","      var async     = require( 'async' );","      var util      = require( 'util' );","      var path      = require( 'path' );","      var fs        = require( 'fs' );","","      // @todo Use component.json settings when available.","      options = extend({","        force: false,","        dest: 'components'","      }, options );","","      // Ensure that we have dependencies.","      if( !this.dependencies || this.dependencies.length === 0 ) {","        return project.emit( 'error', new Error( util.format( 'Project [%s] has no dependencies.', this.directory ) ) );","      }","","      // Starting update.","      project.emit( 'message', 'Starting update [%d] dependencies on [%s] project.', this.dependencies.length, this.directory );","","      // Run through each dependency.","      async.each( this.dependencies, function iterator( dep, next ) {","","        dep = {","          name: dep.split( '@' )[0],","          version: dep.split( '@' )[1] || 'master'","        };","","        project.emit( 'message', 'Updating dependencies for [%s] package.', dep.name );","","        var package = new Project.Package({","          name: dep.name,","          version: dep.version,","          dest: options.dest,","          force: options.force,","          remotes: [","            'https://raw.github.com',","            'https://repository.usabilitydynamics.com'","          ],","          concurrency: 10","        });","","        package.on( 'file', function( file, url ) {","          project.emit( 'verbose', 'Installed a [%s] file for [%s].', file, dep.name );","        });","","        package.on( 'dep', function( component ) {","          project.emit( 'verbose', 'Fetching dependency [%s] for [%s].', component.name, dep.name );","        });","","        package.on( 'installing', function( data ) {","          project.emit( 'message', 'Installing [%s].', dep.name );","        });","","        package.on( 'error', function( error ){","          console.log( \"FUCK\", error.message );","          //project.emit( 'error', 'Error while installing dependency [%s] for project [%s]: %s', dep.name, project.name, error.message  );","          // next( null );","        });","","        package.on( 'exists', function( data ) {","          project.emit( 'verbose', 'Dependency [%s] already exists.', dep.name );","          // next( null );","        });","","        package.on( 'end', function( data ) {","          project.emit( 'message', 'Installed dependency [%s] for project [%s].', dep.name, project.name );","          next( null );","        });","","        process.nextTick( function() {","          // package.install();","        })","","      }, function updated( error ) {","","        process.nextTick( function() {","          project.emit( 'message', 'Project\\'s [%d] dependencies have been udpated.', project.dependencies.length );","          project.emit( 'updated', error );","        });","","      });","","      // @chainable","      return this;","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  install: {","    /**","     * Install Single Dependecy.","     *","     * @param name","     * @returns {*}","     */","    value: function install( name ) {","","      return this;","","    },","    enumerable: true,","    configurable: false,","    writable: false","  },","  is_repository: {","    value: undefined,","    enumerable: true","  },","  have_dependencies: {","    get: function() {","      return Object.keys( this.dependencies ).length ? true : false;","    },","    enumerable: true","  },","  is_valid: {","    get: function() {","      return this.name &amp;&amp; this.version ? true : false;","    },","    enumerable: true","  }","});","","/**"," * Constructor Properties."," *"," */","Object.defineProperties( module.exports = Project, {","  Package: {","    value: require( '../package/package' ),","    enumerable: true,","    configurable: true","  },","  utility: {","    value: require( '../utility' ),","    enumerable: false,","    configurable: true","  }","})"];
