/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['provision/provision.js']) {
  _$jscoverage['provision/provision.js'] = [];
  _$jscoverage['provision/provision.js'][4] = 0;
  _$jscoverage['provision/provision.js'][7] = 0;
  _$jscoverage['provision/provision.js'][9] = 0;
  _$jscoverage['provision/provision.js'][10] = 0;
  _$jscoverage['provision/provision.js'][11] = 0;
  _$jscoverage['provision/provision.js'][12] = 0;
  _$jscoverage['provision/provision.js'][13] = 0;
  _$jscoverage['provision/provision.js'][14] = 0;
  _$jscoverage['provision/provision.js'][15] = 0;
  _$jscoverage['provision/provision.js'][17] = 0;
  _$jscoverage['provision/provision.js'][56] = 0;
  _$jscoverage['provision/provision.js'][58] = 0;
  _$jscoverage['provision/provision.js'][59] = 0;
  _$jscoverage['provision/provision.js'][61] = 0;
  _$jscoverage['provision/provision.js'][62] = 0;
  _$jscoverage['provision/provision.js'][64] = 0;
  _$jscoverage['provision/provision.js'][65] = 0;
  _$jscoverage['provision/provision.js'][67] = 0;
  _$jscoverage['provision/provision.js'][68] = 0;
  _$jscoverage['provision/provision.js'][69] = 0;
  _$jscoverage['provision/provision.js'][72] = 0;
  _$jscoverage['provision/provision.js'][74] = 0;
  _$jscoverage['provision/provision.js'][75] = 0;
  _$jscoverage['provision/provision.js'][76] = 0;
  _$jscoverage['provision/provision.js'][79] = 0;
  _$jscoverage['provision/provision.js'][82] = 0;
  _$jscoverage['provision/provision.js'][86] = 0;
  _$jscoverage['provision/provision.js'][87] = 0;
  _$jscoverage['provision/provision.js'][88] = 0;
  _$jscoverage['provision/provision.js'][89] = 0;
  _$jscoverage['provision/provision.js'][90] = 0;
  _$jscoverage['provision/provision.js'][91] = 0;
  _$jscoverage['provision/provision.js'][93] = 0;
  _$jscoverage['provision/provision.js'][96] = 0;
  _$jscoverage['provision/provision.js'][97] = 0;
  _$jscoverage['provision/provision.js'][98] = 0;
  _$jscoverage['provision/provision.js'][99] = 0;
  _$jscoverage['provision/provision.js'][100] = 0;
  _$jscoverage['provision/provision.js'][101] = 0;
  _$jscoverage['provision/provision.js'][103] = 0;
  _$jscoverage['provision/provision.js'][104] = 0;
  _$jscoverage['provision/provision.js'][108] = 0;
  _$jscoverage['provision/provision.js'][109] = 0;
  _$jscoverage['provision/provision.js'][110] = 0;
  _$jscoverage['provision/provision.js'][111] = 0;
  _$jscoverage['provision/provision.js'][112] = 0;
  _$jscoverage['provision/provision.js'][113] = 0;
  _$jscoverage['provision/provision.js'][114] = 0;
  _$jscoverage['provision/provision.js'][116] = 0;
  _$jscoverage['provision/provision.js'][117] = 0;
  _$jscoverage['provision/provision.js'][118] = 0;
  _$jscoverage['provision/provision.js'][119] = 0;
  _$jscoverage['provision/provision.js'][120] = 0;
  _$jscoverage['provision/provision.js'][122] = 0;
  _$jscoverage['provision/provision.js'][127] = 0;
  _$jscoverage['provision/provision.js'][128] = 0;
  _$jscoverage['provision/provision.js'][129] = 0;
  _$jscoverage['provision/provision.js'][130] = 0;
  _$jscoverage['provision/provision.js'][131] = 0;
  _$jscoverage['provision/provision.js'][132] = 0;
  _$jscoverage['provision/provision.js'][133] = 0;
  _$jscoverage['provision/provision.js'][135] = 0;
  _$jscoverage['provision/provision.js'][137] = 0;
  _$jscoverage['provision/provision.js'][142] = 0;
  _$jscoverage['provision/provision.js'][143] = 0;
  _$jscoverage['provision/provision.js'][144] = 0;
  _$jscoverage['provision/provision.js'][145] = 0;
  _$jscoverage['provision/provision.js'][146] = 0;
  _$jscoverage['provision/provision.js'][147] = 0;
  _$jscoverage['provision/provision.js'][148] = 0;
  _$jscoverage['provision/provision.js'][150] = 0;
  _$jscoverage['provision/provision.js'][155] = 0;
  _$jscoverage['provision/provision.js'][156] = 0;
  _$jscoverage['provision/provision.js'][158] = 0;
  _$jscoverage['provision/provision.js'][159] = 0;
  _$jscoverage['provision/provision.js'][160] = 0;
  _$jscoverage['provision/provision.js'][162] = 0;
  _$jscoverage['provision/provision.js'][163] = 0;
  _$jscoverage['provision/provision.js'][166] = 0;
  _$jscoverage['provision/provision.js'][167] = 0;
  _$jscoverage['provision/provision.js'][168] = 0;
  _$jscoverage['provision/provision.js'][170] = 0;
  _$jscoverage['provision/provision.js'][171] = 0;
  _$jscoverage['provision/provision.js'][172] = 0;
  _$jscoverage['provision/provision.js'][174] = 0;
  _$jscoverage['provision/provision.js'][177] = 0;
  _$jscoverage['provision/provision.js'][178] = 0;
  _$jscoverage['provision/provision.js'][179] = 0;
  _$jscoverage['provision/provision.js'][180] = 0;
  _$jscoverage['provision/provision.js'][183] = 0;
  _$jscoverage['provision/provision.js'][184] = 0;
  _$jscoverage['provision/provision.js'][187] = 0;
  _$jscoverage['provision/provision.js'][188] = 0;
  _$jscoverage['provision/provision.js'][191] = 0;
  _$jscoverage['provision/provision.js'][196] = 0;
  _$jscoverage['provision/provision.js'][197] = 0;
  _$jscoverage['provision/provision.js'][198] = 0;
  _$jscoverage['provision/provision.js'][199] = 0;
  _$jscoverage['provision/provision.js'][200] = 0;
  _$jscoverage['provision/provision.js'][201] = 0;
  _$jscoverage['provision/provision.js'][202] = 0;
  _$jscoverage['provision/provision.js'][204] = 0;
  _$jscoverage['provision/provision.js'][209] = 0;
  _$jscoverage['provision/provision.js'][210] = 0;
  _$jscoverage['provision/provision.js'][211] = 0;
  _$jscoverage['provision/provision.js'][212] = 0;
  _$jscoverage['provision/provision.js'][213] = 0;
  _$jscoverage['provision/provision.js'][214] = 0;
  _$jscoverage['provision/provision.js'][215] = 0;
  _$jscoverage['provision/provision.js'][217] = 0;
  _$jscoverage['provision/provision.js'][218] = 0;
  _$jscoverage['provision/provision.js'][219] = 0;
  _$jscoverage['provision/provision.js'][224] = 0;
  _$jscoverage['provision/provision.js'][225] = 0;
  _$jscoverage['provision/provision.js'][226] = 0;
  _$jscoverage['provision/provision.js'][227] = 0;
  _$jscoverage['provision/provision.js'][228] = 0;
  _$jscoverage['provision/provision.js'][229] = 0;
  _$jscoverage['provision/provision.js'][230] = 0;
  _$jscoverage['provision/provision.js'][232] = 0;
  _$jscoverage['provision/provision.js'][233] = 0;
  _$jscoverage['provision/provision.js'][235] = 0;
  _$jscoverage['provision/provision.js'][237] = 0;
  _$jscoverage['provision/provision.js'][238] = 0;
  _$jscoverage['provision/provision.js'][239] = 0;
  _$jscoverage['provision/provision.js'][240] = 0;
  _$jscoverage['provision/provision.js'][242] = 0;
  _$jscoverage['provision/provision.js'][243] = 0;
  _$jscoverage['provision/provision.js'][244] = 0;
  _$jscoverage['provision/provision.js'][246] = 0;
  _$jscoverage['provision/provision.js'][247] = 0;
  _$jscoverage['provision/provision.js'][249] = 0;
  _$jscoverage['provision/provision.js'][256] = 0;
  _$jscoverage['provision/provision.js'][257] = 0;
  _$jscoverage['provision/provision.js'][260] = 0;
  _$jscoverage['provision/provision.js'][261] = 0;
  _$jscoverage['provision/provision.js'][264] = 0;
  _$jscoverage['provision/provision.js'][265] = 0;
  _$jscoverage['provision/provision.js'][266] = 0;
  _$jscoverage['provision/provision.js'][269] = 0;
  _$jscoverage['provision/provision.js'][270] = 0;
  _$jscoverage['provision/provision.js'][274] = 0;
  _$jscoverage['provision/provision.js'][275] = 0;
  _$jscoverage['provision/provision.js'][278] = 0;
  _$jscoverage['provision/provision.js'][279] = 0;
  _$jscoverage['provision/provision.js'][280] = 0;
  _$jscoverage['provision/provision.js'][281] = 0;
  _$jscoverage['provision/provision.js'][282] = 0;
  _$jscoverage['provision/provision.js'][284] = 0;
  _$jscoverage['provision/provision.js'][287] = 0;
  _$jscoverage['provision/provision.js'][288] = 0;
  _$jscoverage['provision/provision.js'][289] = 0;
  _$jscoverage['provision/provision.js'][290] = 0;
  _$jscoverage['provision/provision.js'][291] = 0;
  _$jscoverage['provision/provision.js'][294] = 0;
  _$jscoverage['provision/provision.js'][297] = 0;
  _$jscoverage['provision/provision.js'][298] = 0;
  _$jscoverage['provision/provision.js'][299] = 0;
  _$jscoverage['provision/provision.js'][300] = 0;
  _$jscoverage['provision/provision.js'][302] = 0;
  _$jscoverage['provision/provision.js'][305] = 0;
  _$jscoverage['provision/provision.js'][306] = 0;
  _$jscoverage['provision/provision.js'][309] = 0;
  _$jscoverage['provision/provision.js'][310] = 0;
  _$jscoverage['provision/provision.js'][313] = 0;
  _$jscoverage['provision/provision.js'][314] = 0;
  _$jscoverage['provision/provision.js'][315] = 0;
  _$jscoverage['provision/provision.js'][316] = 0;
  _$jscoverage['provision/provision.js'][317] = 0;
  _$jscoverage['provision/provision.js'][318] = 0;
  _$jscoverage['provision/provision.js'][319] = 0;
  _$jscoverage['provision/provision.js'][320] = 0;
  _$jscoverage['provision/provision.js'][321] = 0;
  _$jscoverage['provision/provision.js'][322] = 0;
  _$jscoverage['provision/provision.js'][323] = 0;
  _$jscoverage['provision/provision.js'][324] = 0;
  _$jscoverage['provision/provision.js'][325] = 0;
  _$jscoverage['provision/provision.js'][326] = 0;
  _$jscoverage['provision/provision.js'][328] = 0;
  _$jscoverage['provision/provision.js'][332] = 0;
  _$jscoverage['provision/provision.js'][333] = 0;
  _$jscoverage['provision/provision.js'][334] = 0;
  _$jscoverage['provision/provision.js'][335] = 0;
  _$jscoverage['provision/provision.js'][336] = 0;
  _$jscoverage['provision/provision.js'][337] = 0;
  _$jscoverage['provision/provision.js'][338] = 0;
  _$jscoverage['provision/provision.js'][339] = 0;
  _$jscoverage['provision/provision.js'][341] = 0;
  _$jscoverage['provision/provision.js'][345] = 0;
  _$jscoverage['provision/provision.js'][346] = 0;
  _$jscoverage['provision/provision.js'][347] = 0;
  _$jscoverage['provision/provision.js'][349] = 0;
  _$jscoverage['provision/provision.js'][350] = 0;
  _$jscoverage['provision/provision.js'][351] = 0;
  _$jscoverage['provision/provision.js'][352] = 0;
  _$jscoverage['provision/provision.js'][353] = 0;
  _$jscoverage['provision/provision.js'][354] = 0;
  _$jscoverage['provision/provision.js'][355] = 0;
  _$jscoverage['provision/provision.js'][356] = 0;
  _$jscoverage['provision/provision.js'][358] = 0;
  _$jscoverage['provision/provision.js'][364] = 0;
  _$jscoverage['provision/provision.js'][365] = 0;
  _$jscoverage['provision/provision.js'][366] = 0;
  _$jscoverage['provision/provision.js'][367] = 0;
  _$jscoverage['provision/provision.js'][368] = 0;
  _$jscoverage['provision/provision.js'][371] = 0;
  _$jscoverage['provision/provision.js'][372] = 0;
  _$jscoverage['provision/provision.js'][374] = 0;
  _$jscoverage['provision/provision.js'][379] = 0;
  _$jscoverage['provision/provision.js'][380] = 0;
  _$jscoverage['provision/provision.js'][381] = 0;
  _$jscoverage['provision/provision.js'][382] = 0;
  _$jscoverage['provision/provision.js'][383] = 0;
  _$jscoverage['provision/provision.js'][384] = 0;
  _$jscoverage['provision/provision.js'][385] = 0;
  _$jscoverage['provision/provision.js'][386] = 0;
  _$jscoverage['provision/provision.js'][387] = 0;
  _$jscoverage['provision/provision.js'][388] = 0;
  _$jscoverage['provision/provision.js'][389] = 0;
  _$jscoverage['provision/provision.js'][391] = 0;
  _$jscoverage['provision/provision.js'][397] = 0;
  _$jscoverage['provision/provision.js'][398] = 0;
  _$jscoverage['provision/provision.js'][399] = 0;
  _$jscoverage['provision/provision.js'][400] = 0;
  _$jscoverage['provision/provision.js'][401] = 0;
  _$jscoverage['provision/provision.js'][403] = 0;
  _$jscoverage['provision/provision.js'][404] = 0;
  _$jscoverage['provision/provision.js'][405] = 0;
  _$jscoverage['provision/provision.js'][406] = 0;
  _$jscoverage['provision/provision.js'][414] = 0;
  _$jscoverage['provision/provision.js'][415] = 0;
  _$jscoverage['provision/provision.js'][416] = 0;
  _$jscoverage['provision/provision.js'][417] = 0;
  _$jscoverage['provision/provision.js'][418] = 0;
  _$jscoverage['provision/provision.js'][419] = 0;
  _$jscoverage['provision/provision.js'][420] = 0;
  _$jscoverage['provision/provision.js'][421] = 0;
  _$jscoverage['provision/provision.js'][423] = 0;
  _$jscoverage['provision/provision.js'][429] = 0;
  _$jscoverage['provision/provision.js'][430] = 0;
  _$jscoverage['provision/provision.js'][431] = 0;
  _$jscoverage['provision/provision.js'][432] = 0;
  _$jscoverage['provision/provision.js'][433] = 0;
  _$jscoverage['provision/provision.js'][434] = 0;
  _$jscoverage['provision/provision.js'][435] = 0;
  _$jscoverage['provision/provision.js'][436] = 0;
  _$jscoverage['provision/provision.js'][437] = 0;
  _$jscoverage['provision/provision.js'][439] = 0;
  _$jscoverage['provision/provision.js'][444] = 0;
  _$jscoverage['provision/provision.js'][445] = 0;
  _$jscoverage['provision/provision.js'][446] = 0;
  _$jscoverage['provision/provision.js'][447] = 0;
  _$jscoverage['provision/provision.js'][448] = 0;
  _$jscoverage['provision/provision.js'][449] = 0;
  _$jscoverage['provision/provision.js'][450] = 0;
  _$jscoverage['provision/provision.js'][452] = 0;
  _$jscoverage['provision/provision.js'][453] = 0;
  _$jscoverage['provision/provision.js'][454] = 0;
  _$jscoverage['provision/provision.js'][463] = 0;
}
_$jscoverage['provision/provision.js'][4]++;
function Provision() {
  _$jscoverage['provision/provision.js'][7]++;
  console.log("Provision");
  _$jscoverage['provision/provision.js'][9]++;
  var optimist = require("optimist");
  _$jscoverage['provision/provision.js'][10]++;
  var spawn = require("child_process").spawn;
  _$jscoverage['provision/provision.js'][11]++;
  var path = require("path");
  _$jscoverage['provision/provision.js'][12]++;
  var Batch = require("batch");
  _$jscoverage['provision/provision.js'][13]++;
  var superagent = require("superagent");
  _$jscoverage['provision/provision.js'][14]++;
  var semver = require("semver");
  _$jscoverage['provision/provision.js'][15]++;
  var rodentVersion = require("../../package").version;
  _$jscoverage['provision/provision.js'][17]++;
  var tasks = {list: {fn: list, info: "list available deploy targets"}, init: {fn: init, info: "<target> - prepares target to accept deployments"}, start: {fn: start, info: "<target> - starts the remote server"}, stop: {fn: stop, info: "<target> - stops the remote server"}, diff: {fn: diff, info: "<target> [--branch branch] - display what will be deployed on target"}, deploy: {fn: deploy, info: "<target> [--branch branch] [--npmforce] - deploy code"}, abort: {fn: abort, info: "<target> - aborts a hanging deploy"}, monitor: {fn: monitor, info: "<target> - tail logs on target"}, exec: {fn: runWithEnv, info: "<target> [command] - run command in target's environment"}};
  _$jscoverage['provision/provision.js'][56]++;
  main();
  _$jscoverage['provision/provision.js'][58]++;
  function main() {
    _$jscoverage['provision/provision.js'][59]++;
    var optParser = optimist.demand(1).usage(genUsage());
    _$jscoverage['provision/provision.js'][61]++;
    var cmd = optParser.argv._[0];
    _$jscoverage['provision/provision.js'][62]++;
    var task = tasks[cmd];
    _$jscoverage['provision/provision.js'][64]++;
    if (task) {
      _$jscoverage['provision/provision.js'][65]++;
      var packageJson = require("../../package.json");
      _$jscoverage['provision/provision.js'][67]++;
      if (! packageJson.config || ! packageJson.config.targets) {
        _$jscoverage['provision/provision.js'][68]++;
        console.error("package.json missing 'config.targets' config");
        _$jscoverage['provision/provision.js'][69]++;
        process.exit(1);
      }
      _$jscoverage['provision/provision.js'][72]++;
      var requiredRodentVersion = packageJson.config.version;
      _$jscoverage['provision/provision.js'][74]++;
      if (requiredRodentVersion && ! semver.satisfies(rodentVersion, requiredRodentVersion)) {
        _$jscoverage['provision/provision.js'][75]++;
        console.error("package requires rodent version", requiredRodentVersion);
        _$jscoverage['provision/provision.js'][76]++;
        process.exit(1);
      }
      _$jscoverage['provision/provision.js'][79]++;
      task.fn(optParser, packageJson);
    }
    else {
      _$jscoverage['provision/provision.js'][82]++;
      optParser.showHelp();
    }
}
  _$jscoverage['provision/provision.js'][86]++;
  function genUsage() {
    _$jscoverage['provision/provision.js'][87]++;
    var usage = "Usage: $0 [command]\n\nAvailable commands:\n";
    _$jscoverage['provision/provision.js'][88]++;
    var task;
    _$jscoverage['provision/provision.js'][89]++;
    for (var taskName in tasks) {
      _$jscoverage['provision/provision.js'][90]++;
      task = tasks[taskName];
      _$jscoverage['provision/provision.js'][91]++;
      usage += "\n    " + taskName + "\t" + task.info;
}
    _$jscoverage['provision/provision.js'][93]++;
    return usage;
}
  _$jscoverage['provision/provision.js'][96]++;
  function list(optParser, packageJson) {
    _$jscoverage['provision/provision.js'][97]++;
    var name, target;
    _$jscoverage['provision/provision.js'][98]++;
    for (name in packageJson.config.targets) {
      _$jscoverage['provision/provision.js'][99]++;
      target = packageJson.config.targets[name];
      _$jscoverage['provision/provision.js'][100]++;
      console.log(name);
      _$jscoverage['provision/provision.js'][101]++;
      target.ssh.hosts.forEach(printHost);
}
    _$jscoverage['provision/provision.js'][103]++;
    function printHost(host) {
      _$jscoverage['provision/provision.js'][104]++;
      console.log("  " + host);
}
}
  _$jscoverage['provision/provision.js'][108]++;
  function init(optParser, packageJson) {
    _$jscoverage['provision/provision.js'][109]++;
    var argv = optParser.demand(1).argv;
    _$jscoverage['provision/provision.js'][110]++;
    var targetName = argv._[1];
    _$jscoverage['provision/provision.js'][111]++;
    var targetConf = packageJson.config.targets[targetName];
    _$jscoverage['provision/provision.js'][112]++;
    if (! targetConf) {
      _$jscoverage['provision/provision.js'][113]++;
      console.error("Invalid target:", targetName);
      _$jscoverage['provision/provision.js'][114]++;
      process.exit(1);
    }
    _$jscoverage['provision/provision.js'][116]++;
    var destAppPath = appPath(packageJson, targetName);
    _$jscoverage['provision/provision.js'][117]++;
    var repoUrl = packageJson.repository.url;
    _$jscoverage['provision/provision.js'][118]++;
    if (! repoUrl || packageJson.repository.type !== "git") {
      _$jscoverage['provision/provision.js'][119]++;
      console.error("package.json must have repository of type 'git'");
      _$jscoverage['provision/provision.js'][120]++;
      process.exit(1);
    }
    _$jscoverage['provision/provision.js'][122]++;
    sshs(targetConf.ssh, ["mkdir -p " + destAppPath, "git clone " + repoUrl + " " + destAppPath, "cd " + destAppPath, "npm install"]);
}
  _$jscoverage['provision/provision.js'][127]++;
  function start(optParser, packageJson) {
    _$jscoverage['provision/provision.js'][128]++;
    var argv = optParser.demand(1).argv;
    _$jscoverage['provision/provision.js'][129]++;
    var targetName = argv._[1];
    _$jscoverage['provision/provision.js'][130]++;
    var targetConf = packageJson.config.targets[targetName];
    _$jscoverage['provision/provision.js'][131]++;
    if (! targetConf) {
      _$jscoverage['provision/provision.js'][132]++;
      console.error("Invalid target:", targetName);
      _$jscoverage['provision/provision.js'][133]++;
      process.exit(1);
    }
    _$jscoverage['provision/provision.js'][135]++;
    var env = inlineEnv(targetConf.env);
    _$jscoverage['provision/provision.js'][137]++;
    sshs(targetConf.ssh, ["cd " + appPath(packageJson, targetName), env + " npm start"]);
}
  _$jscoverage['provision/provision.js'][142]++;
  function stop(optParser, packageJson) {
    _$jscoverage['provision/provision.js'][143]++;
    var argv = optParser.demand(1).argv;
    _$jscoverage['provision/provision.js'][144]++;
    var targetName = argv._[1];
    _$jscoverage['provision/provision.js'][145]++;
    var targetConf = packageJson.config.targets[targetName];
    _$jscoverage['provision/provision.js'][146]++;
    if (! targetConf) {
      _$jscoverage['provision/provision.js'][147]++;
      console.error("Invalid target:", targetName);
      _$jscoverage['provision/provision.js'][148]++;
      process.exit(1);
    }
    _$jscoverage['provision/provision.js'][150]++;
    sshs(targetConf.ssh, ["cd " + appPath(packageJson, targetName), "npm stop"]);
}
  _$jscoverage['provision/provision.js'][155]++;
  function deploy(optParser, packageJson) {
    _$jscoverage['provision/provision.js'][156]++;
    var argv = optParser.demand(1)["default"]("branch", null)["default"]("npmforce", null).argv;
    _$jscoverage['provision/provision.js'][158]++;
    var targetName = argv._[1];
    _$jscoverage['provision/provision.js'][159]++;
    var targetConf = packageJson.config.targets[targetName];
    _$jscoverage['provision/provision.js'][160]++;
    var forceCommand = "";
    _$jscoverage['provision/provision.js'][162]++;
    if (argv.npmforce) {
      _$jscoverage['provision/provision.js'][163]++;
      forceCommand = " --force";
    }
    _$jscoverage['provision/provision.js'][166]++;
    if (! targetConf) {
      _$jscoverage['provision/provision.js'][167]++;
      console.error("Invalid target:", targetName);
      _$jscoverage['provision/provision.js'][168]++;
      process.exit(1);
    }
    _$jscoverage['provision/provision.js'][170]++;
    var env = inlineEnv(targetConf.env);
    _$jscoverage['provision/provision.js'][171]++;
    if (argv.branch) {
      _$jscoverage['provision/provision.js'][172]++;
      proceed(null, argv.branch);
    }
    else {
      _$jscoverage['provision/provision.js'][174]++;
      getDefaultBranch(proceed);
    }
    _$jscoverage['provision/provision.js'][177]++;
    function proceed(err, branch) {
      _$jscoverage['provision/provision.js'][178]++;
      if (err) {
        _$jscoverage['provision/provision.js'][179]++;
        console.error("Unable to get current branch:", err.stack);
        _$jscoverage['provision/provision.js'][180]++;
        return;
      }
      _$jscoverage['provision/provision.js'][183]++;
      if (packageJson.config.flowdock) {
        _$jscoverage['provision/provision.js'][184]++;
        notifyFlowdock(packageJson, targetName, branch);
      }
      _$jscoverage['provision/provision.js'][187]++;
      if (packageJson.config.librato) {
        _$jscoverage['provision/provision.js'][188]++;
        notifyLibrato(packageJson, targetName, branch);
      }
      _$jscoverage['provision/provision.js'][191]++;
      sshs(targetConf.ssh, ["cd " + appPath(packageJson, targetName), "git fetch", "git checkout origin/" + branch, "git submodule update", "npm prune", "npm install" + forceCommand, env + " npm run deploy"]);
}
}
  _$jscoverage['provision/provision.js'][196]++;
  function abort(optParser, packageJson) {
    _$jscoverage['provision/provision.js'][197]++;
    var argv = optParser.demand(1).argv;
    _$jscoverage['provision/provision.js'][198]++;
    var targetName = argv._[1];
    _$jscoverage['provision/provision.js'][199]++;
    var targetConf = packageJson.config.targets[targetName];
    _$jscoverage['provision/provision.js'][200]++;
    if (! targetConf) {
      _$jscoverage['provision/provision.js'][201]++;
      console.error("Invalid target:", targetName);
      _$jscoverage['provision/provision.js'][202]++;
      process.exit(1);
    }
    _$jscoverage['provision/provision.js'][204]++;
    sshs(targetConf.ssh, ["cd " + appPath(packageJson, targetName), "npm run deploy-abort"]);
}
  _$jscoverage['provision/provision.js'][209]++;
  function monitor(optParser, packageJson) {
    _$jscoverage['provision/provision.js'][210]++;
    var argv = optParser.demand(1).argv;
    _$jscoverage['provision/provision.js'][211]++;
    var targetName = argv._[1];
    _$jscoverage['provision/provision.js'][212]++;
    var targetConf = packageJson.config.targets[targetName];
    _$jscoverage['provision/provision.js'][213]++;
    if (! targetConf) {
      _$jscoverage['provision/provision.js'][214]++;
      console.error("Invalid target:", targetName);
      _$jscoverage['provision/provision.js'][215]++;
      process.exit(1);
    }
    _$jscoverage['provision/provision.js'][217]++;
    packageJson.config.commands = packageJson.config.commands || {};
    _$jscoverage['provision/provision.js'][218]++;
    var tailCmd = packageJson.config.commands.monitor || "tail -f *.log";
    _$jscoverage['provision/provision.js'][219]++;
    sshs(targetConf.ssh, ["cd " + appPath(packageJson, targetName), tailCmd]);
}
  _$jscoverage['provision/provision.js'][224]++;
  function diff(optParser, packageJson) {
    _$jscoverage['provision/provision.js'][225]++;
    var argv = optParser.demand(1)["default"]("branch", null).argv;
    _$jscoverage['provision/provision.js'][226]++;
    var targetName = argv._[1];
    _$jscoverage['provision/provision.js'][227]++;
    var targetConf = packageJson.config.targets[targetName];
    _$jscoverage['provision/provision.js'][228]++;
    if (! targetConf) {
      _$jscoverage['provision/provision.js'][229]++;
      console.error("Invalid target:", targetName);
      _$jscoverage['provision/provision.js'][230]++;
      process.exit(1);
    }
    _$jscoverage['provision/provision.js'][232]++;
    if (argv.branch) {
      _$jscoverage['provision/provision.js'][233]++;
      proceed(null, argv.branch);
    }
    else {
      _$jscoverage['provision/provision.js'][235]++;
      getDefaultBranch(proceed);
    }
    _$jscoverage['provision/provision.js'][237]++;
    function proceed(err, branch) {
      _$jscoverage['provision/provision.js'][238]++;
      if (err) {
        _$jscoverage['provision/provision.js'][239]++;
        console.error("unable to get current branch:", err.stack);
        _$jscoverage['provision/provision.js'][240]++;
        return;
      }
      _$jscoverage['provision/provision.js'][242]++;
      getDeployDiff(packageJson, targetName, branch, "%C(yellow)%h%Creset %Cgreen%cd%Creset %Cred%an%Creset %s", (function (err, gitLog) {
  _$jscoverage['provision/provision.js'][243]++;
  if (err) {
    _$jscoverage['provision/provision.js'][244]++;
    console.error("Unable to get diff:", err.stack);
  }
  else {
    _$jscoverage['provision/provision.js'][246]++;
    if (! gitLog.trim()) {
      _$jscoverage['provision/provision.js'][247]++;
      console.log("No new code to deploy.");
    }
    else {
      _$jscoverage['provision/provision.js'][249]++;
      console.log(gitLog);
    }
  }
}));
}
}
  _$jscoverage['provision/provision.js'][256]++;
  function qescape(it) {
    _$jscoverage['provision/provision.js'][257]++;
    return it.replace(/\\/g, "\\\\").replace(/\'/g, "\\'").replace(/\`/g, "\\`");
}
  _$jscoverage['provision/provision.js'][260]++;
  function qqescape(it) {
    _$jscoverage['provision/provision.js'][261]++;
    return it.replace(/\\/g, "\\\\").replace(/\"/g, "\\\"");
}
  _$jscoverage['provision/provision.js'][264]++;
  function ssh(conf, cmd) {
    _$jscoverage['provision/provision.js'][265]++;
    conf.hosts.forEach((function (host) {
  _$jscoverage['provision/provision.js'][266]++;
  var args = ["-o", "ForwardAgent=yes", "-o", "StrictHostKeyChecking=no", "-p", conf.port, conf.user + "@" + host, "bash -c '" + qescape(cmd) + "'"];
  _$jscoverage['provision/provision.js'][269]++;
  console.log("ssh", args);
  _$jscoverage['provision/provision.js'][270]++;
  exec("ssh", args);
}));
}
  _$jscoverage['provision/provision.js'][274]++;
  function sshs(conf, cmds) {
    _$jscoverage['provision/provision.js'][275]++;
    ssh(conf, cmds.join(" && "));
}
  _$jscoverage['provision/provision.js'][278]++;
  function inlineEnv(it) {
    _$jscoverage['provision/provision.js'][279]++;
    var k, v, items = [];
    _$jscoverage['provision/provision.js'][280]++;
    for (k in it) {
      _$jscoverage['provision/provision.js'][281]++;
      v = it[k] === null? "": it[k].toString();
      _$jscoverage['provision/provision.js'][282]++;
      items.push(k + "=\"" + qqescape(v) + "\"");
}
    _$jscoverage['provision/provision.js'][284]++;
    return items.join(" ");
}
  _$jscoverage['provision/provision.js'][287]++;
  function extend(obj, src) {
    _$jscoverage['provision/provision.js'][288]++;
    var own = ({}).hasOwnProperty;
    _$jscoverage['provision/provision.js'][289]++;
    for (var key in src) {
      _$jscoverage['provision/provision.js'][290]++;
      if (own.call(src, key)) {
        _$jscoverage['provision/provision.js'][291]++;
        obj[key] = src[key];
      }
}
    _$jscoverage['provision/provision.js'][294]++;
    return obj;
}
  _$jscoverage['provision/provision.js'][297]++;
  function exec(cmd, args, opts, cb) {
    _$jscoverage['provision/provision.js'][298]++;
    args = args || [];
    _$jscoverage['provision/provision.js'][299]++;
    opts = opts || {};
    _$jscoverage['provision/provision.js'][300]++;
    cb = cb || (function () {
});
    _$jscoverage['provision/provision.js'][302]++;
    opts = extend({stdio: [process.stdin, process.stdout, process.stderr]}, opts);
    _$jscoverage['provision/provision.js'][305]++;
    var bin = spawn(cmd, args, opts);
    _$jscoverage['provision/provision.js'][306]++;
    bin.on("exit", cb);
}
  _$jscoverage['provision/provision.js'][309]++;
  function appPath(packageJson, targetName) {
    _$jscoverage['provision/provision.js'][310]++;
    return "/home/" + packageJson.config.targets[targetName].ssh.user + "/" + targetName + "/" + packageJson.name;
}
  _$jscoverage['provision/provision.js'][313]++;
  function getDeployDiff(packageJson, targetName, branch, format, cb) {
    _$jscoverage['provision/provision.js'][314]++;
    var exec = require("child_process").exec;
    _$jscoverage['provision/provision.js'][315]++;
    var batch = new Batch();
    _$jscoverage['provision/provision.js'][316]++;
    batch.push((function (cb) {
  _$jscoverage['provision/provision.js'][317]++;
  var sshConf = packageJson.config.targets[targetName].ssh;
  _$jscoverage['provision/provision.js'][318]++;
  var firstHost = sshConf.hosts[0];
  _$jscoverage['provision/provision.js'][319]++;
  var destAppPath = appPath(packageJson, targetName);
  _$jscoverage['provision/provision.js'][320]++;
  var cmd = "ssh " + "-o ForwardAgent=yes " + "-p " + sshConf.port + " " + sshConf.user + "@" + firstHost + " " + "'cd " + destAppPath + " && git rev-parse HEAD'";
  _$jscoverage['provision/provision.js'][321]++;
  exec(cmd, (function (err, stdout, stderr) {
  _$jscoverage['provision/provision.js'][322]++;
  if (err) {
    _$jscoverage['provision/provision.js'][323]++;
    err.stderr = stderr;
    _$jscoverage['provision/provision.js'][324]++;
    err.stdout = stdout;
    _$jscoverage['provision/provision.js'][325]++;
    err.cmd = cmd;
    _$jscoverage['provision/provision.js'][326]++;
    cb(err);
  }
  else {
    _$jscoverage['provision/provision.js'][328]++;
    cb(null, stdout.trim());
  }
}));
}));
    _$jscoverage['provision/provision.js'][332]++;
    batch.push((function (cb) {
  _$jscoverage['provision/provision.js'][333]++;
  var cmd = "git fetch origin";
  _$jscoverage['provision/provision.js'][334]++;
  exec(cmd, (function (err, stdout, stderr) {
  _$jscoverage['provision/provision.js'][335]++;
  if (err) {
    _$jscoverage['provision/provision.js'][336]++;
    err.stderr = stderr;
    _$jscoverage['provision/provision.js'][337]++;
    err.stdout = stdout;
    _$jscoverage['provision/provision.js'][338]++;
    err.cmd = cmd;
    _$jscoverage['provision/provision.js'][339]++;
    cb(err);
  }
  else {
    _$jscoverage['provision/provision.js'][341]++;
    cb();
  }
}));
}));
    _$jscoverage['provision/provision.js'][345]++;
    batch.end((function (err, results) {
  _$jscoverage['provision/provision.js'][346]++;
  if (err) {
    _$jscoverage['provision/provision.js'][347]++;
    return cb(err);
  }
  _$jscoverage['provision/provision.js'][349]++;
  var rev = results[0];
  _$jscoverage['provision/provision.js'][350]++;
  var cmd = "git log --pretty=format:\"" + format + "\" " + rev + "..origin/" + branch;
  _$jscoverage['provision/provision.js'][351]++;
  exec(cmd, (function (err, stdout, stderr) {
  _$jscoverage['provision/provision.js'][352]++;
  if (err) {
    _$jscoverage['provision/provision.js'][353]++;
    err.stderr = stderr;
    _$jscoverage['provision/provision.js'][354]++;
    err.stdout = stdout;
    _$jscoverage['provision/provision.js'][355]++;
    err.cmd = cmd;
    _$jscoverage['provision/provision.js'][356]++;
    cb(err);
  }
  else {
    _$jscoverage['provision/provision.js'][358]++;
    cb(null, stdout.trim());
  }
}));
}));
}
  _$jscoverage['provision/provision.js'][364]++;
  function notifyLibrato(packageJson, targetName, branch) {
    _$jscoverage['provision/provision.js'][365]++;
    getDeployDiff(packageJson, targetName, branch, "<li>%h %cd %an <b>%s</b></li>", (function (err, gitLog) {
  _$jscoverage['provision/provision.js'][366]++;
  if (err) {
    _$jscoverage['provision/provision.js'][367]++;
    console.error("Unable to notify librato:", err.stack);
    _$jscoverage['provision/provision.js'][368]++;
    return;
  }
  _$jscoverage['provision/provision.js'][371]++;
  var user = packageJson.config.librato.email;
  _$jscoverage['provision/provision.js'][372]++;
  var pass = packageJson.config.librato.api_token;
  _$jscoverage['provision/provision.js'][374]++;
  var payload = {title: "deployed " + branch, source: targetName, description: gitLog};
  _$jscoverage['provision/provision.js'][379]++;
  var authorization = "Basic " + new Buffer(user + ":" + pass).toString("base64");
  _$jscoverage['provision/provision.js'][380]++;
  var eventName = packageJson.name + "_deploys";
  _$jscoverage['provision/provision.js'][381]++;
  var url = "https://metrics-api.librato.com/v1/annotations/" + eventName;
  _$jscoverage['provision/provision.js'][382]++;
  var request = superagent.post(url);
  _$jscoverage['provision/provision.js'][383]++;
  request.set("Authorization", authorization);
  _$jscoverage['provision/provision.js'][384]++;
  request.send(payload);
  _$jscoverage['provision/provision.js'][385]++;
  request.end((function (err, resp) {
  _$jscoverage['provision/provision.js'][386]++;
  if (err) {
    _$jscoverage['provision/provision.js'][387]++;
    console.error("Error posting to librato:", err.stack);
  }
  else {
    _$jscoverage['provision/provision.js'][388]++;
    if (resp.statusType !== 2) {
      _$jscoverage['provision/provision.js'][389]++;
      console.error("Posting to librato http code", resp.status, resp.text);
    }
    else {
      _$jscoverage['provision/provision.js'][391]++;
      console.log("Notified Librato");
    }
  }
}));
}));
}
  _$jscoverage['provision/provision.js'][397]++;
  function notifyFlowdock(packageJson, targetName, branch) {
    _$jscoverage['provision/provision.js'][398]++;
    getDeployDiff(packageJson, targetName, branch, "<li>%h %cd %an <b>%s</b></li>", (function (err, gitLog) {
  _$jscoverage['provision/provision.js'][399]++;
  if (err) {
    _$jscoverage['provision/provision.js'][400]++;
    console.error("Unable to notify flowdock:", err.stack);
    _$jscoverage['provision/provision.js'][401]++;
    return;
  }
  _$jscoverage['provision/provision.js'][403]++;
  var content = "The following is about to be deployed:<ul>" + gitLog + "</ul>";
  _$jscoverage['provision/provision.js'][404]++;
  var subject = packageJson.name + " deployed to " + targetName + " with branch " + branch;
  _$jscoverage['provision/provision.js'][405]++;
  var tags = ["#deploy", "#" + packageJson.name, "#" + targetName];
  _$jscoverage['provision/provision.js'][406]++;
  var payload = {source: "rodent", from_address: "rodent@indabamusic.com", project: packageJson.name, subject: subject, content: content, tags: tags};
  _$jscoverage['provision/provision.js'][414]++;
  var token = packageJson.config.flowdock.token;
  _$jscoverage['provision/provision.js'][415]++;
  var request = superagent.post("https://api.flowdock.com/v1/messages/team_inbox/" + token);
  _$jscoverage['provision/provision.js'][416]++;
  request.send(payload);
  _$jscoverage['provision/provision.js'][417]++;
  request.end((function (err, resp) {
  _$jscoverage['provision/provision.js'][418]++;
  if (err) {
    _$jscoverage['provision/provision.js'][419]++;
    console.error("Error posting to flowdock:", err.stack);
  }
  else {
    _$jscoverage['provision/provision.js'][420]++;
    if (resp.statusType !== 2) {
      _$jscoverage['provision/provision.js'][421]++;
      console.error("Posting to flowdock status code", resp.status, resp.text);
    }
    else {
      _$jscoverage['provision/provision.js'][423]++;
      console.log("Notified flowdock");
    }
  }
}));
}));
}
  _$jscoverage['provision/provision.js'][429]++;
  function getDefaultBranch(cb) {
    _$jscoverage['provision/provision.js'][430]++;
    var exec = require("child_process").exec;
    _$jscoverage['provision/provision.js'][431]++;
    var cmd = "git rev-parse --abbrev-ref HEAD";
    _$jscoverage['provision/provision.js'][432]++;
    exec(cmd, (function (err, stdout, stderr) {
  _$jscoverage['provision/provision.js'][433]++;
  if (err) {
    _$jscoverage['provision/provision.js'][434]++;
    err.stderr = stderr;
    _$jscoverage['provision/provision.js'][435]++;
    err.stdout = stdout;
    _$jscoverage['provision/provision.js'][436]++;
    err.cmd = cmd;
    _$jscoverage['provision/provision.js'][437]++;
    cb(err);
  }
  else {
    _$jscoverage['provision/provision.js'][439]++;
    cb(null, stdout.trim());
  }
}));
}
  _$jscoverage['provision/provision.js'][444]++;
  function runWithEnv(optParser, packageJson) {
    _$jscoverage['provision/provision.js'][445]++;
    var argv = optParser.demand(1).argv;
    _$jscoverage['provision/provision.js'][446]++;
    var targetName = argv._[1];
    _$jscoverage['provision/provision.js'][447]++;
    var target = packageJson.config.targets[targetName];
    _$jscoverage['provision/provision.js'][448]++;
    if (! target) {
      _$jscoverage['provision/provision.js'][449]++;
      console.error("Invalid target:", targetName);
      _$jscoverage['provision/provision.js'][450]++;
      process.exit(1);
    }
    _$jscoverage['provision/provision.js'][452]++;
    var args = argv._.slice(2);
    _$jscoverage['provision/provision.js'][453]++;
    var env = extend(extend({}, target.env), process.env);
    _$jscoverage['provision/provision.js'][454]++;
    var child = spawn("bash", ["-c", args.join(" ")], {stdio: "inherit", env: env});
}
}
_$jscoverage['provision/provision.js'][463]++;
Object.defineProperties(module.exports = Provision, {method: {value: (function method() {
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['provision/provision.js'].source = ["/**"," *"," */","function Provision() {","","","  console.log( 'Provision' );","","  var optimist = require( 'optimist' );","  var spawn = require( 'child_process' ).spawn;","  var path = require( 'path' );","  var Batch = require( 'batch' );","  var superagent = require( 'superagent' );","  var semver = require( 'semver' );","  var rodentVersion = require( '../../package' ).version;","","  var tasks = {","    list: {","      fn: list,","      info: \"list available deploy targets\"","    },","    init: {","      fn: init,","      info: \"&lt;target&gt; - prepares target to accept deployments\"","    },","    start: {","      fn: start,","      info: \"&lt;target&gt; - starts the remote server\"","    },","    stop: {","      fn: stop,","      info: \"&lt;target&gt; - stops the remote server\"","    },","    diff: {","      fn: diff,","      info: \"&lt;target&gt; [--branch branch] - display what will be deployed on target\"","    },","    deploy: {","      fn: deploy,","      info: \"&lt;target&gt; [--branch branch] [--npmforce] - deploy code\",","    },","    abort: {","      fn: abort,","      info: \"&lt;target&gt; - aborts a hanging deploy\",","    },","    monitor: {","      fn: monitor,","      info: \"&lt;target&gt; - tail logs on target\",","    },","    exec: {","      fn: runWithEnv,","      info: \"&lt;target&gt; [command] - run command in target's environment\",","    },","  };","","  main();","","  function main () {","    var optParser = optimist.demand( 1 ).usage( genUsage() );","","    var cmd = optParser.argv._[0];","    var task = tasks[cmd];","","    if ( task ) {","      var packageJson = require( \"../../package.json\" );","","      if ( !packageJson.config || !packageJson.config.targets ) {","        console.error( \"package.json missing 'config.targets' config\" );","        process.exit( 1 );","      }","","      var requiredRodentVersion = packageJson.config.version;","","      if ( requiredRodentVersion &amp;&amp; !semver.satisfies( rodentVersion, requiredRodentVersion ) ) {","        console.error( \"package requires rodent version\", requiredRodentVersion );","        process.exit( 1 );","      }","","      task.fn( optParser, packageJson );","","    } else {","      optParser.showHelp()","    }","  }","","  function genUsage () {","    var usage = \"Usage: $0 [command]\\n\\nAvailable commands:\\n\";","    var task;","    for ( var taskName in tasks ) {","      task = tasks[taskName];","      usage += \"\\n    \" + taskName + \"\\t\" + task.info;","    }","    return usage;","  }","","  function list ( optParser, packageJson ) {","    var name, target;","    for ( name in packageJson.config.targets ) {","      target = packageJson.config.targets[name];","      console.log( name )","      target.ssh.hosts.forEach( printHost );","    }","    function printHost ( host ) {","      console.log( \"  \" + host );","    }","  }","","  function init ( optParser, packageJson ) {","    var argv = optParser.demand( 1 ).argv;","    var targetName = argv._[1]","    var targetConf = packageJson.config.targets[targetName]","    if ( !targetConf ) {","      console.error( \"Invalid target:\", targetName );","      process.exit( 1 );","    }","    var destAppPath = appPath( packageJson, targetName );","    var repoUrl = packageJson.repository.url;","    if ( !repoUrl || packageJson.repository.type !== 'git' ) {","      console.error( \"package.json must have repository of type 'git'\" );","      process.exit( 1 );","    }","    sshs( targetConf.ssh, [","      \"mkdir -p \" + destAppPath, \"git clone \" + repoUrl + \" \" + destAppPath, \"cd \" + destAppPath, \"npm install\"","    ] );","  }","","  function start ( optParser, packageJson ) {","    var argv = optParser.demand( 1 ).argv;","    var targetName = argv._[1]","    var targetConf = packageJson.config.targets[targetName]","    if ( !targetConf ) {","      console.error( \"Invalid target:\", targetName );","      process.exit( 1 );","    }","    var env = inlineEnv( targetConf.env );","","    sshs( targetConf.ssh, [","      \"cd \" + appPath( packageJson, targetName ), env + \" npm start\"","    ] );","  }","","  function stop ( optParser, packageJson ) {","    var argv = optParser.demand( 1 ).argv;","    var targetName = argv._[1]","    var targetConf = packageJson.config.targets[targetName]","    if ( !targetConf ) {","      console.error( \"Invalid target:\", targetName );","      process.exit( 1 );","    }","    sshs( targetConf.ssh, [","      \"cd \" + appPath( packageJson, targetName ), \"npm stop\"","    ] );","  }","","  function deploy ( optParser, packageJson ) {","    var argv = optParser.demand( 1 ).default( 'branch', null ).default( 'npmforce', null ).argv;","","    var targetName = argv._[1]","    var targetConf = packageJson.config.targets[targetName]","    var forceCommand = \"\";","","    if ( argv.npmforce ) {","      forceCommand = \" --force\"","    }","","    if ( !targetConf ) {","      console.error( \"Invalid target:\", targetName );","      process.exit( 1 );","    }","    var env = inlineEnv( targetConf.env );","    if ( argv.branch ) {","      proceed( null, argv.branch );","    } else {","      getDefaultBranch( proceed );","    }","","    function proceed ( err, branch ) {","      if ( err ) {","        console.error( \"Unable to get current branch:\", err.stack );","        return;","      }","","      if ( packageJson.config.flowdock ) {","        notifyFlowdock( packageJson, targetName, branch );","      }","","      if ( packageJson.config.librato ) {","        notifyLibrato( packageJson, targetName, branch );","      }","","      sshs( targetConf.ssh, [","        \"cd \" + appPath( packageJson, targetName ), \"git fetch\", \"git checkout origin/\" + branch, \"git submodule update\", \"npm prune\", \"npm install\" + forceCommand, env + \" npm run deploy\" ] );","    }","  }","","  function abort ( optParser, packageJson ) {","    var argv = optParser.demand( 1 ).argv;","    var targetName = argv._[1]","    var targetConf = packageJson.config.targets[targetName]","    if ( !targetConf ) {","      console.error( \"Invalid target:\", targetName );","      process.exit( 1 );","    }","    sshs( targetConf.ssh, [","      \"cd \" + appPath( packageJson, targetName ), \"npm run deploy-abort\"","    ] );","  }","","  function monitor ( optParser, packageJson ) {","    var argv = optParser.demand( 1 ).argv;","    var targetName = argv._[1]","    var targetConf = packageJson.config.targets[targetName]","    if ( !targetConf ) {","      console.error( \"Invalid target:\", targetName );","      process.exit( 1 );","    }","    packageJson.config.commands = packageJson.config.commands || {};","    var tailCmd = packageJson.config.commands.monitor || \"tail -f *.log\";","    sshs( targetConf.ssh, [","      \"cd \" + appPath( packageJson, targetName ), tailCmd","    ] );","  }","","  function diff ( optParser, packageJson ) {","    var argv = optParser.demand( 1 ).default( 'branch', null ).argv;","    var targetName = argv._[1]","    var targetConf = packageJson.config.targets[targetName]","    if ( !targetConf ) {","      console.error( \"Invalid target:\", targetName );","      process.exit( 1 );","    }","    if ( argv.branch ) {","      proceed( null, argv.branch );","    } else {","      getDefaultBranch( proceed );","    }","    function proceed ( err, branch ) {","      if ( err ) {","        console.error( \"unable to get current branch:\", err.stack );","        return;","      }","      getDeployDiff( packageJson, targetName, branch, \"%C(yellow)%h%Creset %Cgreen%cd%Creset %Cred%an%Creset %s\", function ( err, gitLog ) {","        if ( err ) {","          console.error( \"Unable to get diff:\", err.stack );","        } else {","          if ( !gitLog.trim() ) {","            console.log( \"No new code to deploy.\" );","          } else {","            console.log( gitLog );","          }","        }","      } );","    }","  }","","  function qescape ( it ) {","    return it.replace( /\\\\/g, \"\\\\\\\\\" ).replace( /\\'/g, \"\\\\'\" ).replace( /\\`/g, \"\\\\`\" );","  }","","  function qqescape ( it ) {","    return it.replace( /\\\\/g, \"\\\\\\\\\" ).replace( /\\\"/g, '\\\\\"' );","  }","","  function ssh ( conf, cmd ) {","    conf.hosts.forEach( function ( host ) {","      var args = [","        \"-o\", \"ForwardAgent=yes\", \"-o\", \"StrictHostKeyChecking=no\", \"-p\", conf.port, conf.user + \"@\" + host, \"bash -c '\" + qescape( cmd ) + \"'\"","      ];","      console.log( \"ssh\", args );","      exec( \"ssh\", args );","    } );","  }","","  function sshs ( conf, cmds ) {","    ssh( conf, cmds.join( \" &amp;&amp; \" ) );","  }","","  function inlineEnv ( it ) {","    var k, v, items = [];","    for ( k in it ) {","      v = it[k] === null ? \"\" : it[k].toString();","      items.push( k + \"=\\\"\" + qqescape( v ) + \"\\\"\" );","    }","    return items.join( \" \" );","  }","","  function extend ( obj, src ) {","    var own = {}.hasOwnProperty;","    for ( var key in src ) {","      if ( own.call( src, key ) ) {","        obj[key] = src[key];","      }","    }","    return obj;","  }","","  function exec ( cmd, args, opts, cb ) {","    args = args || [];","    opts = opts || {};","    cb = cb || function () {","    };","    opts = extend( {","      stdio: [process.stdin, process.stdout, process.stderr]","    }, opts );","    var bin = spawn( cmd, args, opts );","    bin.on( 'exit', cb );","  }","","  function appPath ( packageJson, targetName ) {","    return \"/home/\" + packageJson.config.targets[targetName].ssh.user + \"/\" + targetName + \"/\" + packageJson.name;","  }","","  function getDeployDiff ( packageJson, targetName, branch, format, cb ) {","    var exec = require( 'child_process' ).exec;","    var batch = new Batch();","    batch.push( function ( cb ) {","      var sshConf = packageJson.config.targets[targetName].ssh;","      var firstHost = sshConf.hosts[0];","      var destAppPath = appPath( packageJson, targetName );","      var cmd = \"ssh \" + \"-o ForwardAgent=yes \" + \"-p \" + sshConf.port + \" \" + sshConf.user + \"@\" + firstHost + \" \" + \"'cd \" + destAppPath + \" &amp;&amp; git rev-parse HEAD'\";","      exec( cmd, function ( err, stdout, stderr ) {","        if ( err ) {","          err.stderr = stderr;","          err.stdout = stdout;","          err.cmd = cmd;","          cb( err );","        } else {","          cb( null, stdout.trim() );","        }","      } );","    } );","    batch.push( function ( cb ) {","      var cmd = \"git fetch origin\";","      exec( cmd, function ( err, stdout, stderr ) {","        if ( err ) {","          err.stderr = stderr;","          err.stdout = stdout;","          err.cmd = cmd;","          cb( err );","        } else {","          cb();","        }","      } );","    } );","    batch.end( function ( err, results ) {","      if ( err ) {","        return cb( err );","      }","      var rev = results[0];","      var cmd = \"git log --pretty=format:\\\"\" + format + \"\\\" \" + rev + \"..origin/\" + branch;","      exec( cmd, function ( err, stdout, stderr ) {","        if ( err ) {","          err.stderr = stderr;","          err.stdout = stdout;","          err.cmd = cmd;","          cb( err );","        } else {","          cb( null, stdout.trim() );","        }","      } );","    } );","  }","","  function notifyLibrato ( packageJson, targetName, branch ) {","    getDeployDiff( packageJson, targetName, branch, \"&lt;li&gt;%h %cd %an &lt;b&gt;%s&lt;/b&gt;&lt;/li&gt;\", function ( err, gitLog ) {","      if ( err ) {","        console.error( \"Unable to notify librato:\", err.stack );","        return;","      }","","      var user = packageJson.config.librato.email","      var pass = packageJson.config.librato.api_token","","      var payload = {","        title: \"deployed \" + branch,","        source: targetName,","        description: gitLog,","      };","      var authorization = 'Basic ' + new Buffer( user + ':' + pass ).toString( 'base64' );","      var eventName = packageJson.name + \"_deploys\";","      var url = \"https://metrics-api.librato.com/v1/annotations/\" + eventName;","      var request = superagent.post( url );","      request.set( 'Authorization', authorization );","      request.send( payload );","      request.end( function ( err, resp ) {","        if ( err ) {","          console.error( \"Error posting to librato:\", err.stack )","        } else if ( resp.statusType !== 2 ) {","          console.error( \"Posting to librato http code\", resp.status, resp.text );","        } else {","          console.log( \"Notified Librato\" );","        }","      } );","    } );","  }","","  function notifyFlowdock ( packageJson, targetName, branch ) {","    getDeployDiff( packageJson, targetName, branch, \"&lt;li&gt;%h %cd %an &lt;b&gt;%s&lt;/b&gt;&lt;/li&gt;\", function ( err, gitLog ) {","      if ( err ) {","        console.error( \"Unable to notify flowdock:\", err.stack );","        return;","      }","      var content = \"The following is about to be deployed:&lt;ul&gt;\" + gitLog + \"&lt;/ul&gt;\";","      var subject = packageJson.name + \" deployed to \" + targetName + \" with branch \" + branch;","      var tags = [\"#deploy\", \"#\" + packageJson.name, \"#\" + targetName];","      var payload = {","        source: \"rodent\",","        from_address: \"rodent@indabamusic.com\",","        project: packageJson.name,","        subject: subject,","        content: content,","        tags: tags","      };","      var token = packageJson.config.flowdock.token;","      var request = superagent.post( \"https://api.flowdock.com/v1/messages/team_inbox/\" + token );","      request.send( payload );","      request.end( function ( err, resp ) {","        if ( err ) {","          console.error( \"Error posting to flowdock:\", err.stack );","        } else if ( resp.statusType !== 2 ) {","          console.error( \"Posting to flowdock status code\", resp.status, resp.text );","        } else {","          console.log( \"Notified flowdock\" );","        }","      } );","    } );","  }","","  function getDefaultBranch ( cb ) {","    var exec = require( 'child_process' ).exec;","    var cmd = \"git rev-parse --abbrev-ref HEAD\";","    exec( cmd, function ( err, stdout, stderr ) {","      if ( err ) {","        err.stderr = stderr;","        err.stdout = stdout;","        err.cmd = cmd;","        cb( err );","      } else {","        cb( null, stdout.trim() );","      }","    } );","  }","","  function runWithEnv ( optParser, packageJson ) {","    var argv = optParser.demand( 1 ).argv;","    var targetName = argv._[1];","    var target = packageJson.config.targets[targetName];","    if ( !target ) {","      console.error( \"Invalid target:\", targetName );","      process.exit( 1 );","    }","    var args = argv._.slice( 2 )","    var env = extend( extend( {}, target.env ), process.env )","    var child = spawn( 'bash', ['-c', args.join( \" \" )], {","      stdio: 'inherit',","      env: env,","    } )","  }","","","}","","Object.defineProperties( module.exports = Provision, {","  method: {","    value: function method() {","","    },","    enumerable: true,","    configurable: true,","    writable: true","  }","})"];
