/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['package/package.js']) {
  _$jscoverage['package/package.js'] = [];
  _$jscoverage['package/package.js'][17] = 0;
  _$jscoverage['package/package.js'][19] = 0;
  _$jscoverage['package/package.js'][20] = 0;
  _$jscoverage['package/package.js'][23] = 0;
  _$jscoverage['package/package.js'][24] = 0;
  _$jscoverage['package/package.js'][25] = 0;
  _$jscoverage['package/package.js'][26] = 0;
  _$jscoverage['package/package.js'][27] = 0;
  _$jscoverage['package/package.js'][30] = 0;
  _$jscoverage['package/package.js'][36] = 0;
  _$jscoverage['package/package.js'][55] = 0;
  _$jscoverage['package/package.js'][57] = 0;
  _$jscoverage['package/package.js'][58] = 0;
  _$jscoverage['package/package.js'][62] = 0;
  _$jscoverage['package/package.js'][70] = 0;
  _$jscoverage['package/package.js'][73] = 0;
  _$jscoverage['package/package.js'][74] = 0;
  _$jscoverage['package/package.js'][76] = 0;
  _$jscoverage['package/package.js'][82] = 0;
  _$jscoverage['package/package.js'][85] = 0;
  _$jscoverage['package/package.js'][86] = 0;
  _$jscoverage['package/package.js'][87] = 0;
  _$jscoverage['package/package.js'][88] = 0;
  _$jscoverage['package/package.js'][89] = 0;
  _$jscoverage['package/package.js'][90] = 0;
  _$jscoverage['package/package.js'][92] = 0;
  _$jscoverage['package/package.js'][98] = 0;
  _$jscoverage['package/package.js'][107] = 0;
  _$jscoverage['package/package.js'][108] = 0;
  _$jscoverage['package/package.js'][110] = 0;
  _$jscoverage['package/package.js'][111] = 0;
  _$jscoverage['package/package.js'][112] = 0;
  _$jscoverage['package/package.js'][113] = 0;
  _$jscoverage['package/package.js'][121] = 0;
  _$jscoverage['package/package.js'][122] = 0;
  _$jscoverage['package/package.js'][123] = 0;
  _$jscoverage['package/package.js'][124] = 0;
  _$jscoverage['package/package.js'][125] = 0;
  _$jscoverage['package/package.js'][126] = 0;
  _$jscoverage['package/package.js'][127] = 0;
  _$jscoverage['package/package.js'][128] = 0;
  _$jscoverage['package/package.js'][129] = 0;
  _$jscoverage['package/package.js'][130] = 0;
  _$jscoverage['package/package.js'][131] = 0;
  _$jscoverage['package/package.js'][132] = 0;
  _$jscoverage['package/package.js'][133] = 0;
  _$jscoverage['package/package.js'][134] = 0;
  _$jscoverage['package/package.js'][135] = 0;
  _$jscoverage['package/package.js'][137] = 0;
  _$jscoverage['package/package.js'][140] = 0;
  _$jscoverage['package/package.js'][142] = 0;
  _$jscoverage['package/package.js'][144] = 0;
  _$jscoverage['package/package.js'][147] = 0;
  _$jscoverage['package/package.js'][148] = 0;
  _$jscoverage['package/package.js'][152] = 0;
  _$jscoverage['package/package.js'][154] = 0;
  _$jscoverage['package/package.js'][155] = 0;
  _$jscoverage['package/package.js'][158] = 0;
  _$jscoverage['package/package.js'][160] = 0;
  _$jscoverage['package/package.js'][161] = 0;
  _$jscoverage['package/package.js'][164] = 0;
  _$jscoverage['package/package.js'][165] = 0;
  _$jscoverage['package/package.js'][167] = 0;
  _$jscoverage['package/package.js'][168] = 0;
  _$jscoverage['package/package.js'][171] = 0;
  _$jscoverage['package/package.js'][175] = 0;
  _$jscoverage['package/package.js'][176] = 0;
  _$jscoverage['package/package.js'][177] = 0;
  _$jscoverage['package/package.js'][179] = 0;
  _$jscoverage['package/package.js'][194] = 0;
  _$jscoverage['package/package.js'][195] = 0;
  _$jscoverage['package/package.js'][208] = 0;
  _$jscoverage['package/package.js'][209] = 0;
  _$jscoverage['package/package.js'][210] = 0;
  _$jscoverage['package/package.js'][211] = 0;
  _$jscoverage['package/package.js'][212] = 0;
  _$jscoverage['package/package.js'][213] = 0;
  _$jscoverage['package/package.js'][214] = 0;
  _$jscoverage['package/package.js'][215] = 0;
  _$jscoverage['package/package.js'][216] = 0;
  _$jscoverage['package/package.js'][217] = 0;
  _$jscoverage['package/package.js'][218] = 0;
  _$jscoverage['package/package.js'][219] = 0;
  _$jscoverage['package/package.js'][220] = 0;
  _$jscoverage['package/package.js'][221] = 0;
  _$jscoverage['package/package.js'][224] = 0;
  _$jscoverage['package/package.js'][225] = 0;
  _$jscoverage['package/package.js'][226] = 0;
  _$jscoverage['package/package.js'][227] = 0;
  _$jscoverage['package/package.js'][229] = 0;
  _$jscoverage['package/package.js'][231] = 0;
  _$jscoverage['package/package.js'][233] = 0;
  _$jscoverage['package/package.js'][235] = 0;
  _$jscoverage['package/package.js'][236] = 0;
  _$jscoverage['package/package.js'][239] = 0;
  _$jscoverage['package/package.js'][241] = 0;
  _$jscoverage['package/package.js'][242] = 0;
  _$jscoverage['package/package.js'][244] = 0;
  _$jscoverage['package/package.js'][247] = 0;
  _$jscoverage['package/package.js'][249] = 0;
  _$jscoverage['package/package.js'][251] = 0;
  _$jscoverage['package/package.js'][252] = 0;
  _$jscoverage['package/package.js'][253] = 0;
  _$jscoverage['package/package.js'][254] = 0;
  _$jscoverage['package/package.js'][255] = 0;
  _$jscoverage['package/package.js'][257] = 0;
  _$jscoverage['package/package.js'][261] = 0;
  _$jscoverage['package/package.js'][263] = 0;
  _$jscoverage['package/package.js'][264] = 0;
  _$jscoverage['package/package.js'][267] = 0;
  _$jscoverage['package/package.js'][268] = 0;
  _$jscoverage['package/package.js'][271] = 0;
  _$jscoverage['package/package.js'][272] = 0;
  _$jscoverage['package/package.js'][275] = 0;
  _$jscoverage['package/package.js'][276] = 0;
  _$jscoverage['package/package.js'][279] = 0;
  _$jscoverage['package/package.js'][280] = 0;
  _$jscoverage['package/package.js'][283] = 0;
  _$jscoverage['package/package.js'][284] = 0;
  _$jscoverage['package/package.js'][287] = 0;
  _$jscoverage['package/package.js'][288] = 0;
  _$jscoverage['package/package.js'][291] = 0;
  _$jscoverage['package/package.js'][292] = 0;
  _$jscoverage['package/package.js'][295] = 0;
  _$jscoverage['package/package.js'][296] = 0;
  _$jscoverage['package/package.js'][299] = 0;
  _$jscoverage['package/package.js'][300] = 0;
  _$jscoverage['package/package.js'][304] = 0;
  _$jscoverage['package/package.js'][305] = 0;
  _$jscoverage['package/package.js'][309] = 0;
  _$jscoverage['package/package.js'][310] = 0;
  _$jscoverage['package/package.js'][311] = 0;
  _$jscoverage['package/package.js'][316] = 0;
  _$jscoverage['package/package.js'][317] = 0;
  _$jscoverage['package/package.js'][318] = 0;
  _$jscoverage['package/package.js'][319] = 0;
  _$jscoverage['package/package.js'][324] = 0;
  _$jscoverage['package/package.js'][325] = 0;
  _$jscoverage['package/package.js'][326] = 0;
  _$jscoverage['package/package.js'][331] = 0;
  _$jscoverage['package/package.js'][332] = 0;
  _$jscoverage['package/package.js'][333] = 0;
  _$jscoverage['package/package.js'][334] = 0;
  _$jscoverage['package/package.js'][335] = 0;
  _$jscoverage['package/package.js'][336] = 0;
  _$jscoverage['package/package.js'][338] = 0;
  _$jscoverage['package/package.js'][339] = 0;
  _$jscoverage['package/package.js'][342] = 0;
  _$jscoverage['package/package.js'][360] = 0;
}
_$jscoverage['package/package.js'][17]++;
function Package(options) {
  _$jscoverage['package/package.js'][19]++;
  if (! (this instanceof Package)) {
    _$jscoverage['package/package.js'][20]++;
    return new Package(options);
  }
  _$jscoverage['package/package.js'][23]++;
  var self = this;
  _$jscoverage['package/package.js'][24]++;
  var extend = require("extend");
  _$jscoverage['package/package.js'][25]++;
  var path = require("path");
  _$jscoverage['package/package.js'][26]++;
  var fs = require("fs");
  _$jscoverage['package/package.js'][27]++;
  var exists = fs.existsSync || path.existsSync;
  _$jscoverage['package/package.js'][30]++;
  options = extend({name: "new-component", version: "0.0.1", dest: "components"}, options || {});
  _$jscoverage['package/package.js'][36]++;
  extend(Package.__super.prototype, {install: {value: Package.prototype.install, enumerable: true}, reallyInstall: {value: Package.prototype.reallyInstall, enumerable: true}, error: {value: Package.prototype.error, enumerable: true}, getJSON: {value: Package.prototype.getJSON, enumerable: true}});
  _$jscoverage['package/package.js'][55]++;
  var _package = new Package.__super(options.name, options.version, options);
  _$jscoverage['package/package.js'][57]++;
  require("object-emitter").mixin(_package);
  _$jscoverage['package/package.js'][58]++;
  require("object-settings").mixin(this);
  _$jscoverage['package/package.js'][62]++;
  return _package;
}
_$jscoverage['package/package.js'][70]++;
Object.defineProperties(Package.prototype, {install: {value: (function install() {
  _$jscoverage['package/package.js'][73]++;
  var self = this;
  _$jscoverage['package/package.js'][74]++;
  var name = this.name;
  _$jscoverage['package/package.js'][76]++;
  if (! ~ name.indexOf("/")) {
  }
  _$jscoverage['package/package.js'][82]++;
  this.getLocalJSON((function (err, json) {
  _$jscoverage['package/package.js'][85]++;
  if (err && err.code == "ENOENT") {
    _$jscoverage['package/package.js'][86]++;
    self.reallyInstall();
  }
  else {
    _$jscoverage['package/package.js'][87]++;
    if (err) {
      _$jscoverage['package/package.js'][88]++;
      self.emit("error", err);
    }
    else {
      _$jscoverage['package/package.js'][89]++;
      if (! self.force) {
        _$jscoverage['package/package.js'][90]++;
        self.emit("exists", self);
      }
      else {
        _$jscoverage['package/package.js'][92]++;
        self.reallyInstall();
      }
    }
  }
}));
  _$jscoverage['package/package.js'][98]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, error: {value: (function error(res, url) {
  _$jscoverage['package/package.js'][107]++;
  var http = require("http");
  _$jscoverage['package/package.js'][108]++;
  var https = require("https");
  _$jscoverage['package/package.js'][110]++;
  var name = http.STATUS_CODES[res.statusCode];
  _$jscoverage['package/package.js'][111]++;
  var err = new Error("failed to fetch " + url + ", got " + res.statusCode + " \"" + name + "\"");
  _$jscoverage['package/package.js'][112]++;
  err.status = res.statusCode;
  _$jscoverage['package/package.js'][113]++;
  return err;
}), enumerable: true, configurable: true, writable: true}, getJSON: {value: (function (fn) {
  _$jscoverage['package/package.js'][121]++;
  var path = require("path");
  _$jscoverage['package/package.js'][122]++;
  var dirname = path.dirname;
  _$jscoverage['package/package.js'][123]++;
  var basename = path.basename;
  _$jscoverage['package/package.js'][124]++;
  var extname = path.extname;
  _$jscoverage['package/package.js'][125]++;
  var resolve = path.resolve;
  _$jscoverage['package/package.js'][126]++;
  var mkdir = require("mkdirp").mkdirp;
  _$jscoverage['package/package.js'][127]++;
  var netrc = require("netrc");
  _$jscoverage['package/package.js'][128]++;
  var Batch = require("batch");
  _$jscoverage['package/package.js'][129]++;
  var url = require("url");
  _$jscoverage['package/package.js'][130]++;
  var parse = url.parse;
  _$jscoverage['package/package.js'][131]++;
  var fs = require("fs");
  _$jscoverage['package/package.js'][132]++;
  var rimraf = require("rimraf");
  _$jscoverage['package/package.js'][133]++;
  var http = require("http");
  _$jscoverage['package/package.js'][134]++;
  var https = require("https");
  _$jscoverage['package/package.js'][135]++;
  var request = require("superagent");
  _$jscoverage['package/package.js'][137]++;
  var self = this;
  _$jscoverage['package/package.js'][140]++;
  var url = this.url("component.json");
  _$jscoverage['package/package.js'][142]++;
  var req = request.get(url);
  _$jscoverage['package/package.js'][144]++;
  req.set("Accept-Encoding", "gzip");
  _$jscoverage['package/package.js'][147]++;
  if (self.proxy) {
    _$jscoverage['package/package.js'][148]++;
    req.proxy(self.proxy);
  }
  _$jscoverage['package/package.js'][152]++;
  var netrc = self.netrc[parse(url).hostname];
  _$jscoverage['package/package.js'][154]++;
  if (netrc) {
    _$jscoverage['package/package.js'][155]++;
    req.auth(netrc.login, netrc.password);
  }
  _$jscoverage['package/package.js'][158]++;
  req.end((function (res) {
  _$jscoverage['package/package.js'][160]++;
  if (res.error) {
    _$jscoverage['package/package.js'][161]++;
    return fn(self.error(res, url));
  }
  _$jscoverage['package/package.js'][164]++;
  try {
    _$jscoverage['package/package.js'][165]++;
    var json = JSON.parse(res.text);
  }
  catch (err) {
    _$jscoverage['package/package.js'][167]++;
    err.message += " in " + url;
    _$jscoverage['package/package.js'][168]++;
    return fn(err);
  }
  _$jscoverage['package/package.js'][171]++;
  fn(null, json);
}));
  _$jscoverage['package/package.js'][175]++;
  req.on("error", (function (err) {
  _$jscoverage['package/package.js'][176]++;
  if ("getaddrinfo" == err.syscall) {
    _$jscoverage['package/package.js'][177]++;
    err.message = "dns lookup failed";
  }
  _$jscoverage['package/package.js'][179]++;
  fn(err);
}));
}), enumerable: true, configurable: true, writable: true}, dirname: {value: (function dirname() {
  _$jscoverage['package/package.js'][194]++;
  var resolve = path.resolve;
  _$jscoverage['package/package.js'][195]++;
  return resolve(this.dest, this.name.split("/").join("-")).toLowerCase();
}), enumerable: true, configurable: true, writable: true}, reallyInstall: {value: (function reallyInstall() {
  _$jscoverage['package/package.js'][208]++;
  var path = require("path");
  _$jscoverage['package/package.js'][209]++;
  var dirname = path.dirname;
  _$jscoverage['package/package.js'][210]++;
  var basename = path.basename;
  _$jscoverage['package/package.js'][211]++;
  var extname = path.extname;
  _$jscoverage['package/package.js'][212]++;
  var resolve = path.resolve;
  _$jscoverage['package/package.js'][213]++;
  var mkdir = require("mkdirp").mkdirp;
  _$jscoverage['package/package.js'][214]++;
  var netrc = require("netrc");
  _$jscoverage['package/package.js'][215]++;
  var Batch = require("batch");
  _$jscoverage['package/package.js'][216]++;
  var url = require("url");
  _$jscoverage['package/package.js'][217]++;
  var parse = url.parse;
  _$jscoverage['package/package.js'][218]++;
  var fs = require("fs");
  _$jscoverage['package/package.js'][219]++;
  var rimraf = require("rimraf");
  _$jscoverage['package/package.js'][220]++;
  var http = require("http");
  _$jscoverage['package/package.js'][221]++;
  var https = require("https");
  _$jscoverage['package/package.js'][224]++;
  var self = this;
  _$jscoverage['package/package.js'][225]++;
  var i = 0;
  _$jscoverage['package/package.js'][226]++;
  var batch;
  _$jscoverage['package/package.js'][227]++;
  var last;
  _$jscoverage['package/package.js'][229]++;
  next();
  _$jscoverage['package/package.js'][231]++;
  function next() {
    _$jscoverage['package/package.js'][233]++;
    self.remote = self.remotes[i++];
    _$jscoverage['package/package.js'][235]++;
    if (! self.remote) {
      _$jscoverage['package/package.js'][236]++;
      return self.emit("error", new Error("can not find remote for \"" + self.name + "\", Remotes: " + self.remotes.join(", ")));
    }
    _$jscoverage['package/package.js'][239]++;
    last = i == self.remotes.length;
    _$jscoverage['package/package.js'][241]++;
    self.remote = url.parse(self.remote);
    _$jscoverage['package/package.js'][242]++;
    self.remote.href = self.remote.href.slice(0, -1);
    _$jscoverage['package/package.js'][244]++;
    self.once("error", next);
    _$jscoverage['package/package.js'][247]++;
    batch = new Batch();
    _$jscoverage['package/package.js'][249]++;
    self.getJSON((function (err, json) {
  _$jscoverage['package/package.js'][251]++;
  if (err) {
    _$jscoverage['package/package.js'][252]++;
    err.fatal = 404 != err.status || last;
    _$jscoverage['package/package.js'][253]++;
    return self.destroy((function (error) {
  _$jscoverage['package/package.js'][254]++;
  if (error) {
    _$jscoverage['package/package.js'][255]++;
    self.emit("error", error);
  }
  _$jscoverage['package/package.js'][257]++;
  self.emit("error", err);
}));
  }
  _$jscoverage['package/package.js'][261]++;
  var files = [];
  _$jscoverage['package/package.js'][263]++;
  if (json.scripts) {
    _$jscoverage['package/package.js'][264]++;
    files = files.concat(json.scripts);
  }
  _$jscoverage['package/package.js'][267]++;
  if (json.styles) {
    _$jscoverage['package/package.js'][268]++;
    files = files.concat(json.styles);
  }
  _$jscoverage['package/package.js'][271]++;
  if (json.templates) {
    _$jscoverage['package/package.js'][272]++;
    files = files.concat(json.templates);
  }
  _$jscoverage['package/package.js'][275]++;
  if (json.views) {
    _$jscoverage['package/package.js'][276]++;
    files = files.concat(json.views);
  }
  _$jscoverage['package/package.js'][279]++;
  if (json.schemas) {
    _$jscoverage['package/package.js'][280]++;
    files = files.concat(json.schemas);
  }
  _$jscoverage['package/package.js'][283]++;
  if (json.files) {
    _$jscoverage['package/package.js'][284]++;
    files = files.concat(json.files);
  }
  _$jscoverage['package/package.js'][287]++;
  if (json.images) {
    _$jscoverage['package/package.js'][288]++;
    files = files.concat(json.images);
  }
  _$jscoverage['package/package.js'][291]++;
  if (json.libs) {
    _$jscoverage['package/package.js'][292]++;
    files = files.concat(json.libs);
  }
  _$jscoverage['package/package.js'][295]++;
  if (json.fonts) {
    _$jscoverage['package/package.js'][296]++;
    files = files.concat(json.fonts);
  }
  _$jscoverage['package/package.js'][299]++;
  if (json.main) {
    _$jscoverage['package/package.js'][300]++;
    files = files.concat(json.main);
  }
  _$jscoverage['package/package.js'][304]++;
  if (json.repository && ! json.repo) {
    _$jscoverage['package/package.js'][305]++;
    json.repo = parse(json.repository.url).pathname;
  }
  _$jscoverage['package/package.js'][309]++;
  if (json.dependencies) {
    _$jscoverage['package/package.js'][310]++;
    batch.push((function (done) {
  _$jscoverage['package/package.js'][311]++;
  self.getDependencies(json.dependencies, done);
}));
  }
  _$jscoverage['package/package.js'][316]++;
  batch.push((function (done) {
  _$jscoverage['package/package.js'][317]++;
  self.mkdir(self.dirname(), (function (err) {
  _$jscoverage['package/package.js'][318]++;
  json = JSON.stringify(json, null, 2);
  _$jscoverage['package/package.js'][319]++;
  self.writeFile("component.json", json, done);
}));
}));
  _$jscoverage['package/package.js'][324]++;
  batch.push((function (done) {
  _$jscoverage['package/package.js'][325]++;
  self.mkdir(self.dirname(), (function (err) {
  _$jscoverage['package/package.js'][326]++;
  self.getFiles(files, done);
}));
}));
  _$jscoverage['package/package.js'][331]++;
  batch.end((function (err) {
  _$jscoverage['package/package.js'][332]++;
  if (err) {
    _$jscoverage['package/package.js'][333]++;
    err.fatal = last;
    _$jscoverage['package/package.js'][334]++;
    self.destroy((function (error) {
  _$jscoverage['package/package.js'][335]++;
  if (error) {
    _$jscoverage['package/package.js'][336]++;
    self.emit("error", error);
  }
  _$jscoverage['package/package.js'][338]++;
  self.emit("error", err);
  _$jscoverage['package/package.js'][339]++;
  self.emit("end");
}));
  }
  else {
    _$jscoverage['package/package.js'][342]++;
    self.emit("end");
  }
}));
}));
}
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['package/package.js'][360]++;
Object.defineProperties(module.exports = Package, {Builder: {value: require("../builder/builder"), enumerable: true, configurable: true}, Project: {value: require("../project/project"), enumerable: true, configurable: true}, __super: {value: require("component/lib/Package"), enumerable: false}, utility: {value: require("../utility"), enumerable: false, configurable: true}, logger: {value: require("winston"), writable: true, enumerable: true, configurable: true}});
_$jscoverage['package/package.js'].source = ["/**"," * Package Loader"," *"," * Loads a package from a repository and fetches all dependencies."," * All declared component files are put into the components directory."," *"," * ## Events"," * - file (file, url)"," * - error (error)"," * - end ()"," * - dep (pkg)"," * - exists (instance)"," *"," * options.dest Relative destination path for component storage."," *"," */","function Package( options ) {","","  if( !(this instanceof Package ) ) {","    return new Package( options );","  }","","  var self = this;","  var extend = require( 'extend' );","  var path = require( 'path' );","  var fs = require( 'fs' );","  var exists = fs.existsSync || path.existsSync;","","  // Update composer.json with defaults.","  options = extend( {","    name: 'new-component',","    version: '0.0.1',","    dest: 'components'","  }, options || {} );","","  extend( Package.__super.prototype, {","    install: {","      value: Package.prototype.install,","      enumerable: true","    },","    reallyInstall: {","      value: Package.prototype.reallyInstall,","      enumerable: true","    },","    error: {","      value: Package.prototype.error,","      enumerable: true","    },","    getJSON: {","      value: Package.prototype.getJSON,","      enumerable: true","    }","  } );","","  var _package = new Package.__super( options.name, options.version, options );","","  require( 'object-emitter' ).mixin( _package );","  require( 'object-settings' ).mixin( this );","","  // console.log( require( 'util' ).inspect( _package, { showHidden: false, colors: true, depth: 2 } ) )","","  return _package;","","}","","/**"," * Instance Properties."," *"," */","Object.defineProperties( Package.prototype, {","  install: {","    value: function install() {","      var self = this;","      var name = this.name;","","      if( !~name.indexOf( '/' ) ) {","        //console.log( require( 'util' ).inspect( this, { showHidden: true, colors: true, depth: 2 } ) )","        //this.emit( 'error', new Error( 'Invalid component name \"' + name + '\"' ) );","        //return this;","      }","","      this.getLocalJSON( function( err, json ) {","        // console.log( 'this.getLocalJSON', err || json );","","        if( err &amp;&amp; err.code == 'ENOENT' ) {","          self.reallyInstall();","        } else if( err ) {","          self.emit( 'error', err );","        } else if( !self.force ) {","          self.emit( 'exists', self );","        } else {","          self.reallyInstall();","        }","","      } );","","      // @chainable","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  error: {","    value: function error( res, url ) {","      var http = require( 'http' );","      var https = require( 'https' );","","      var name = http.STATUS_CODES[res.statusCode];","      var err = new Error( 'failed to fetch ' + url + ', got ' + res.statusCode + ' \"' + name + '\"' );","      err.status = res.statusCode;","      return err;","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  getJSON: {","    value: function( fn ) {","      var path = require( 'path' );","      var dirname = path.dirname;","      var basename = path.basename;","      var extname = path.extname;","      var resolve = path.resolve;","      var mkdir = require( 'mkdirp' ).mkdirp;","      var netrc = require( 'netrc' );","      var Batch = require( 'batch' );","      var url = require( 'url' );","      var parse = url.parse;","      var fs = require( 'fs' );","      var rimraf = require( 'rimraf' );","      var http = require( 'http' );","      var https = require( 'https' );","      var request = require( 'superagent' );","","      var self = this;","","      // @todo Should fallback to composer.json or package.json if not available.","      var url = this.url( 'component.json' );","","      var req = request.get( url );","","      req.set( 'Accept-Encoding', 'gzip' );","","      // Add proxy","      if( self.proxy ) {","        req.proxy( self.proxy );","      }","","      // authorize call","      var netrc = self.netrc[parse( url ).hostname];","","      if( netrc ) {","        req.auth( netrc.login, netrc.password );","      }","","      req.end( function( res ) {","","        if( res.error ) {","          return fn( self.error( res, url ) );","        }","","        try {","          var json = JSON.parse( res.text );","        } catch( err ) {","          err.message += ' in ' + url;","          return fn( err );","        }","","        fn( null, json );","","      } );","","      req.on( 'error', function( err ) {","        if( 'getaddrinfo' == err.syscall ) {","          err.message = 'dns lookup failed';","        }","        fn( err );","      } );","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  dirname: {","    /**","     * Enforce Lowercase","     *","     * @returns {string}","     */","    value: function dirname() {","      var resolve = path.resolve;","      return resolve( this.dest, this.name.split( '/' ).join( '-' ) ).toLowerCase();","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  reallyInstall: {","    /**","     * Really install the component.","     *","     * @api public","     */","    value: function reallyInstall() {","      var path = require( 'path' );","      var dirname = path.dirname;","      var basename = path.basename;","      var extname = path.extname;","      var resolve = path.resolve;","      var mkdir = require( 'mkdirp' ).mkdirp;","      var netrc = require( 'netrc' );","      var Batch = require( 'batch' );","      var url = require( 'url' );","      var parse = url.parse;","      var fs = require( 'fs' );","      var rimraf = require( 'rimraf' );","      var http = require( 'http' );","      var https = require( 'https' );","","      // Single Package","      var self = this;","      var i = 0;","      var batch;","      var last;","","      next();","","      function next() {","","        self.remote = self.remotes[i++];","","        if( !self.remote ) {","          return self.emit( 'error', new Error( 'can not find remote for \"' + self.name + '\", Remotes: ' + self.remotes.join( ', ' ) ) );","        }","","        last = i == self.remotes.length;","","        self.remote = url.parse( self.remote );","        self.remote.href = self.remote.href.slice( 0, -1 );","","        self.once( 'error', next );","","        // kick off installation","        batch = new Batch;","","        self.getJSON( function( err, json ) {","","          if( err ) {","            err.fatal = 404 != err.status || last;","            return self.destroy( function( error ) {","              if( error ) {","                self.emit( 'error', error );","              }","              self.emit( 'error', err );","            } );","          }","","          var files = [];","","          if( json.scripts ) {","            files = files.concat( json.scripts );","          }","","          if( json.styles ) {","            files = files.concat( json.styles );","          }","","          if( json.templates ) {","            files = files.concat( json.templates );","          }","","          if( json.views ) {","            files = files.concat( json.views );","          }","","          if( json.schemas ) {","            files = files.concat( json.schemas );","          }","","          if( json.files ) {","            files = files.concat( json.files );","          }","","          if( json.images ) {","            files = files.concat( json.images );","          }","","          if( json.libs ) {","            files = files.concat( json.libs );","          }","","          if( json.fonts ) {","            files = files.concat( json.fonts );","          }","","          if( json.main ) {","            files = files.concat( json.main );","          }","","          // Support for package.json repository format","          if( json.repository &amp;&amp; !json.repo ) {","            json.repo = parse( json.repository.url ).pathname;","          }","","          // Get Dependencies.","          if( json.dependencies ) {","            batch.push( function( done ) {","              self.getDependencies( json.dependencies, done );","            } );","          }","","          // Update compoent.json it seems.","          batch.push( function( done ) {","            self.mkdir( self.dirname(), function( err ) {","              json = JSON.stringify( json, null, 2 );","              self.writeFile( 'component.json', json, done );","            } );","          } );","","          // Do something with files?","          batch.push( function( done ) {","            self.mkdir( self.dirname(), function( err ) {","              self.getFiles( files, done );","            } );","          } );","","          // Bail.","          batch.end( function( err ) {","            if( err ) {","              err.fatal = last;","              self.destroy( function( error ) {","                if( error ) {","                  self.emit( 'error', error );","                }","                self.emit( 'error', err );","                self.emit( 'end' );","              } );","            } else {","              self.emit( 'end' );","            }","          } );","","        } );","      }","","    },","    enumerable: true,","    configurable: true,","    writable: true","  }","} );","","/**"," * Constructor Properties."," *"," */","Object.defineProperties( module.exports = Package, {","  Builder: {","    value: require( '../builder/builder' ),","    enumerable: true,","    configurable: true","  },","  Project: {","    value: require( '../project/project' ),","    enumerable: true,","    configurable: true","  },","  __super: {","    value: require( 'component/lib/Package' ),","    enumerable: false","  },","  utility: {","    value: require( '../utility' ),","    enumerable: false,","    configurable: true","  },","  logger: {","    value: require( 'winston' ),","    writable: true,","    enumerable: true,","    configurable: true","  }","} )","","",""];
