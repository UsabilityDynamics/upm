/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['builder/builder.js']) {
  _$jscoverage['builder/builder.js'] = [];
  _$jscoverage['builder/builder.js'][11] = 0;
  _$jscoverage['builder/builder.js'][13] = 0;
  _$jscoverage['builder/builder.js'][14] = 0;
  _$jscoverage['builder/builder.js'][17] = 0;
  _$jscoverage['builder/builder.js'][18] = 0;
  _$jscoverage['builder/builder.js'][19] = 0;
  _$jscoverage['builder/builder.js'][20] = 0;
  _$jscoverage['builder/builder.js'][23] = 0;
  _$jscoverage['builder/builder.js'][32] = 0;
  _$jscoverage['builder/builder.js'][56] = 0;
  _$jscoverage['builder/builder.js'][59] = 0;
  _$jscoverage['builder/builder.js'][62] = 0;
  _$jscoverage['builder/builder.js'][77] = 0;
  _$jscoverage['builder/builder.js'][80] = 0;
  _$jscoverage['builder/builder.js'][116] = 0;
  _$jscoverage['builder/builder.js'][117] = 0;
  _$jscoverage['builder/builder.js'][119] = 0;
  _$jscoverage['builder/builder.js'][128] = 0;
  _$jscoverage['builder/builder.js'][129] = 0;
  _$jscoverage['builder/builder.js'][131] = 0;
  _$jscoverage['builder/builder.js'][138] = 0;
  _$jscoverage['builder/builder.js'][146] = 0;
  _$jscoverage['builder/builder.js'][156] = 0;
  _$jscoverage['builder/builder.js'][157] = 0;
  _$jscoverage['builder/builder.js'][158] = 0;
  _$jscoverage['builder/builder.js'][159] = 0;
  _$jscoverage['builder/builder.js'][161] = 0;
  _$jscoverage['builder/builder.js'][162] = 0;
  _$jscoverage['builder/builder.js'][168] = 0;
  _$jscoverage['builder/builder.js'][170] = 0;
  _$jscoverage['builder/builder.js'][171] = 0;
  _$jscoverage['builder/builder.js'][174] = 0;
  _$jscoverage['builder/builder.js'][175] = 0;
  _$jscoverage['builder/builder.js'][179] = 0;
  _$jscoverage['builder/builder.js'][182] = 0;
  _$jscoverage['builder/builder.js'][183] = 0;
  _$jscoverage['builder/builder.js'][184] = 0;
  _$jscoverage['builder/builder.js'][185] = 0;
  _$jscoverage['builder/builder.js'][187] = 0;
  _$jscoverage['builder/builder.js'][188] = 0;
  _$jscoverage['builder/builder.js'][189] = 0;
  _$jscoverage['builder/builder.js'][196] = 0;
  _$jscoverage['builder/builder.js'][198] = 0;
  _$jscoverage['builder/builder.js'][199] = 0;
  _$jscoverage['builder/builder.js'][200] = 0;
  _$jscoverage['builder/builder.js'][201] = 0;
  _$jscoverage['builder/builder.js'][202] = 0;
  _$jscoverage['builder/builder.js'][203] = 0;
  _$jscoverage['builder/builder.js'][208] = 0;
  _$jscoverage['builder/builder.js'][210] = 0;
  _$jscoverage['builder/builder.js'][211] = 0;
  _$jscoverage['builder/builder.js'][213] = 0;
  _$jscoverage['builder/builder.js'][227] = 0;
  _$jscoverage['builder/builder.js'][228] = 0;
  _$jscoverage['builder/builder.js'][229] = 0;
  _$jscoverage['builder/builder.js'][230] = 0;
  _$jscoverage['builder/builder.js'][232] = 0;
  _$jscoverage['builder/builder.js'][233] = 0;
  _$jscoverage['builder/builder.js'][235] = 0;
  _$jscoverage['builder/builder.js'][236] = 0;
  _$jscoverage['builder/builder.js'][239] = 0;
  _$jscoverage['builder/builder.js'][240] = 0;
  _$jscoverage['builder/builder.js'][243] = 0;
  _$jscoverage['builder/builder.js'][257] = 0;
  _$jscoverage['builder/builder.js'][269] = 0;
  _$jscoverage['builder/builder.js'][292] = 0;
  _$jscoverage['builder/builder.js'][293] = 0;
  _$jscoverage['builder/builder.js'][296] = 0;
  _$jscoverage['builder/builder.js'][297] = 0;
  _$jscoverage['builder/builder.js'][298] = 0;
  _$jscoverage['builder/builder.js'][299] = 0;
  _$jscoverage['builder/builder.js'][301] = 0;
  _$jscoverage['builder/builder.js'][302] = 0;
  _$jscoverage['builder/builder.js'][303] = 0;
  _$jscoverage['builder/builder.js'][305] = 0;
  _$jscoverage['builder/builder.js'][306] = 0;
  _$jscoverage['builder/builder.js'][307] = 0;
  _$jscoverage['builder/builder.js'][308] = 0;
  _$jscoverage['builder/builder.js'][310] = 0;
  _$jscoverage['builder/builder.js'][312] = 0;
  _$jscoverage['builder/builder.js'][314] = 0;
  _$jscoverage['builder/builder.js'][315] = 0;
  _$jscoverage['builder/builder.js'][318] = 0;
  _$jscoverage['builder/builder.js'][319] = 0;
  _$jscoverage['builder/builder.js'][320] = 0;
  _$jscoverage['builder/builder.js'][321] = 0;
  _$jscoverage['builder/builder.js'][323] = 0;
  _$jscoverage['builder/builder.js'][354] = 0;
}
_$jscoverage['builder/builder.js'][11]++;
function Builder(options) {
  _$jscoverage['builder/builder.js'][13]++;
  if (! (this instanceof Builder)) {
    _$jscoverage['builder/builder.js'][14]++;
    return new Builder(options);
  }
  _$jscoverage['builder/builder.js'][17]++;
  var resolve = require("path").resolve;
  _$jscoverage['builder/builder.js'][18]++;
  var extend = require("extend");
  _$jscoverage['builder/builder.js'][19]++;
  var path = require("path");
  _$jscoverage['builder/builder.js'][20]++;
  var schema = require("../../static/schemas/component.json");
  _$jscoverage['builder/builder.js'][23]++;
  options = extend({directory: process.cwd(), name: "build", out: "build", require: false, prefix: null}, options);
  _$jscoverage['builder/builder.js'][32]++;
  Object.defineProperties(this.__super.prototype, {json: {value: Builder.prototype.json, enumerable: true}, buildLibs: {value: Builder.prototype.buildLibs, enumerable: true}, buildSchemas: {value: Builder.prototype.buildSchemas, enumerable: true}, buildAsset: {value: Builder.prototype.buildAsset, enumerable: true}, build: {value: Builder.prototype.build, enumerable: true}});
  _$jscoverage['builder/builder.js'][56]++;
  var builder = new this.__super(options.directory);
  _$jscoverage['builder/builder.js'][59]++;
  require("object-emitter").mixin(builder);
  _$jscoverage['builder/builder.js'][62]++;
  extend(builder, {lookupPaths: builder.lookupPaths || [], assetsDest: builder.assetsDest || resolve("./temp"), ignored: {scripts: [], styles: [], files: [], images: [], fonts: [], templates: [], libs: [], schemas: []}});
  _$jscoverage['builder/builder.js'][77]++;
  console.log(require("util").inspect(builder, {showHidden: false, colors: true, depth: 2}));
  _$jscoverage['builder/builder.js'][80]++;
  extend(builder.config, {config: {"out": "./components", namespace: builder.config.config && builder.config.config.namespace? builder.config.config.namespace: Builder.utility.get_namespace(builder.config), basename: "build"}, build: {libs: {out: "./build/vendor", settings: {"autoload": true}}, schemas: {out: "./build/schemas", settings: {}}, scripts: {out: "./build/scripts", settings: {"minify": true}}, styles: {out: "./build/styles", settings: {"minify": true}}, templates: {out: "./build/templates", settings: {}}}});
  _$jscoverage['builder/builder.js'][116]++;
  process.nextTick((function () {
  _$jscoverage['builder/builder.js'][117]++;
  builder.emit("message", "Starting to compile [%s] project.", builder.config.name);
  _$jscoverage['builder/builder.js'][119]++;
  builder.build((function (error, obj) {
  _$jscoverage['builder/builder.js'][128]++;
  if (error) {
    _$jscoverage['builder/builder.js'][129]++;
    return builder.emit("error", "Fatail error during [%s] build: [%s].", builder.config.name, error.message);
  }
  else {
    _$jscoverage['builder/builder.js'][131]++;
    builder.emit("message", "Build of [%s] complete.", builder.config.name);
  }
}));
}));
  _$jscoverage['builder/builder.js'][138]++;
  return builder;
}
_$jscoverage['builder/builder.js'][146]++;
Object.defineProperties(Builder.prototype, {buildAsset: {value: (function buildAsset(type, fn) {
  _$jscoverage['builder/builder.js'][156]++;
  var Batch = require("batch");
  _$jscoverage['builder/builder.js'][157]++;
  var self = this;
  _$jscoverage['builder/builder.js'][158]++;
  var conf = this.config;
  _$jscoverage['builder/builder.js'][159]++;
  var batch = new Batch();
  _$jscoverage['builder/builder.js'][161]++;
  function normalize(name) {
    _$jscoverage['builder/builder.js'][162]++;
    return name.replace("/", "-");
}
  _$jscoverage['builder/builder.js'][168]++;
  if (self.hasDependencies()) {
    _$jscoverage['builder/builder.js'][170]++;
    Object.keys(self.dependencies()).forEach((function (dep) {
  _$jscoverage['builder/builder.js'][171]++;
  dep = normalize(dep);
  _$jscoverage['builder/builder.js'][174]++;
  if (self.ignoring(dep, type)) {
    _$jscoverage['builder/builder.js'][175]++;
    return self.emit("ignoring %s", dep);
  }
  _$jscoverage['builder/builder.js'][179]++;
  self.ignore(dep, type);
  _$jscoverage['builder/builder.js'][182]++;
  batch.push((function (done) {
  _$jscoverage['builder/builder.js'][183]++;
  self.lookup(dep, (function (err, dir) {
  _$jscoverage['builder/builder.js'][184]++;
  if (err) {
    _$jscoverage['builder/builder.js'][185]++;
    return done(err);
  }
  _$jscoverage['builder/builder.js'][187]++;
  var builder = new Builder(dir, self);
  _$jscoverage['builder/builder.js'][188]++;
  self.emit("dependency", builder);
  _$jscoverage['builder/builder.js'][189]++;
  builder.buildAsset(type, done);
}));
}));
}));
  }
  _$jscoverage['builder/builder.js'][196]++;
  if (conf[type]) {
    _$jscoverage['builder/builder.js'][198]++;
    conf[type].forEach((function (file) {
  _$jscoverage['builder/builder.js'][199]++;
  var path = self.path(file);
  _$jscoverage['builder/builder.js'][200]++;
  var name = normalize(self.basename);
  _$jscoverage['builder/builder.js'][201]++;
  var dest = join(self.assetsDest, name, file);
  _$jscoverage['builder/builder.js'][202]++;
  batch.push((function (done) {
  _$jscoverage['builder/builder.js'][203]++;
  self.copyTo(path, dest, done);
}));
}));
  }
  _$jscoverage['builder/builder.js'][208]++;
  batch.end((function (err, res) {
  _$jscoverage['builder/builder.js'][210]++;
  if (err) {
    _$jscoverage['builder/builder.js'][211]++;
    return fn(err);
  }
  _$jscoverage['builder/builder.js'][213]++;
  fn(null, res);
}));
}), enumerable: true}, json: {value: (function json() {
  _$jscoverage['builder/builder.js'][227]++;
  var fs = require("fs");
  _$jscoverage['builder/builder.js'][228]++;
  var read = fs.readFileSync;
  _$jscoverage['builder/builder.js'][229]++;
  var path = this.path("component.json") || this.path("package.json") || this.path("composer.json");
  _$jscoverage['builder/builder.js'][230]++;
  var str = read(path, "utf8");
  _$jscoverage['builder/builder.js'][232]++;
  try {
    _$jscoverage['builder/builder.js'][233]++;
    var obj = JSON.parse(str);
  }
  catch (err) {
    _$jscoverage['builder/builder.js'][235]++;
    err.message += " in " + path;
    _$jscoverage['builder/builder.js'][236]++;
    throw err;
  }
  _$jscoverage['builder/builder.js'][239]++;
  if (obj.main) {
    _$jscoverage['builder/builder.js'][240]++;
    obj.main = obj.main.replace(/^\.\//, "");
  }
  _$jscoverage['builder/builder.js'][243]++;
  return obj;
}), enumerable: true}, buildLibs: {value: (function buildLibs(fn) {
  _$jscoverage['builder/builder.js'][257]++;
  this.buildType("libs", fn);
}), enumerable: true}, buildSchemas: {value: (function buildSchemas(fn) {
  _$jscoverage['builder/builder.js'][269]++;
  this.buildType("schemas", fn);
}), enumerable: true}, build: {value: (function build(fn) {
  _$jscoverage['builder/builder.js'][292]++;
  function empty(s) {
    _$jscoverage['builder/builder.js'][293]++;
    return "" != s;
}
  _$jscoverage['builder/builder.js'][296]++;
  var builder = this;
  _$jscoverage['builder/builder.js'][297]++;
  var requirejs = require("component-require");
  _$jscoverage['builder/builder.js'][298]++;
  var Batch = require("batch");
  _$jscoverage['builder/builder.js'][299]++;
  var batch = new Batch();
  _$jscoverage['builder/builder.js'][301]++;
  batch.push(this.buildScripts.bind(this));
  _$jscoverage['builder/builder.js'][302]++;
  batch.push(this.buildTemplates.bind(this));
  _$jscoverage['builder/builder.js'][303]++;
  batch.push(this.buildAliases.bind(this));
  _$jscoverage['builder/builder.js'][305]++;
  batch.push(this.buildStyles.bind(this));
  _$jscoverage['builder/builder.js'][306]++;
  batch.push(this.buildImages.bind(this));
  _$jscoverage['builder/builder.js'][307]++;
  batch.push(this.buildFonts.bind(this));
  _$jscoverage['builder/builder.js'][308]++;
  batch.push(this.buildFiles.bind(this));
  _$jscoverage['builder/builder.js'][310]++;
  batch.end((function (err, res) {
  _$jscoverage['builder/builder.js'][312]++;
  return console.log("\n------------\n", builder.config.name, res);
  _$jscoverage['builder/builder.js'][314]++;
  if (err) {
    _$jscoverage['builder/builder.js'][315]++;
    return fn(err);
  }
  _$jscoverage['builder/builder.js'][318]++;
  var scripts = res.shift();
  _$jscoverage['builder/builder.js'][319]++;
  var require = res.shift();
  _$jscoverage['builder/builder.js'][320]++;
  var templates = res.shift();
  _$jscoverage['builder/builder.js'][321]++;
  var custom = builder._js;
  _$jscoverage['builder/builder.js'][323]++;
  fn(null, {js: [scripts, require, templates, custom].filter(empty).join("\n"), css: res.shift(), images: res.shift(), fonts: res.shift(), files: res.shift(), require: requirejs});
}));
}), enumerable: true}, __super: {value: require("component-builder"), enumerable: false}});
_$jscoverage['builder/builder.js'][354]++;
Object.defineProperties(module.exports = Builder, {upm: {value: require("../upm"), enumerable: false, configurable: true}, utility: {value: require("../utility"), enumerable: false, configurable: true}});
_$jscoverage['builder/builder.js'].source = ["/**"," * Compiles components and outputs built files into target directories."," *"," *"," *    builder.addLookup( 'lib' );"," *    builder.addFile('scripts', 'view.js', 'compiled view js');"," *    builder.prefixUrls( options.prefix );"," *    builder.copyAssetsTo( options.out );"," *"," */","function Builder( options ) {","","  if( !(this instanceof Builder ) ) {","    return new Builder( options );","  }","","  var resolve = require( 'path' ).resolve;","  var extend = require( 'extend' );","  var path = require( 'path' );","  var schema = require( '../../static/schemas/component.json' )","","  // Override Component Configuration","  options = extend( {","    directory: process.cwd(),","    name: 'build',","    out: 'build',","    require: false,","    prefix: null","  }, options );","","  // Override Builder prototype.","  Object.defineProperties( this.__super.prototype, {","    json: {","      value: Builder.prototype.json,","      enumerable: true","    },","    buildLibs: {","      value: Builder.prototype.buildLibs,","      enumerable: true","    },","    buildSchemas: {","      value: Builder.prototype.buildSchemas,","      enumerable: true","    },","    buildAsset: {","      value: Builder.prototype.buildAsset,","      enumerable: true","    },","    build: {","      value: Builder.prototype.build,","      enumerable: true","    },","  } );","","  // Create builder instance.","  var builder = new this.__super( options.directory );","","  // Mixing better EventEmitter.","  require( 'object-emitter' ).mixin( builder );","","  // Add Type Support","  extend( builder, {","    lookupPaths: builder.lookupPaths || [],","    assetsDest: builder.assetsDest || resolve( './temp' ),","    ignored: {","      scripts: [],","      styles: [],","      files: [],","      images: [],","      fonts: [],","      templates: [],","      libs: [],","      schemas: []","    }","  });","","  console.log( require( 'util' ).inspect( builder, { showHidden: false, colors: true, depth: 2 } ) )","","    // Set config defaults.","  extend( builder.config, {","    config: {","      \"out\": \"./components\",","      namespace: builder.config.config &amp;&amp; builder.config.config['namespace'] ? builder.config.config['namespace'] : Builder.utility.get_namespace( builder.config ),","      basename: \"build\"","    },","    build: {","      libs: {","        out: \"./build/vendor\",","        settings: {","          \"autoload\": true","        }","      },","      schemas: {","        out: \"./build/schemas\",","        settings: {}","      },","      scripts: {","        out: \"./build/scripts\",","        settings: {","          \"minify\": true","        }","      },","      styles: {","        out: \"./build/styles\",","        settings: {","          \"minify\": true","        }","      },","      templates: {","        out: \"./build/templates\",","        settings: {}","      }","    }","  } );","","  process.nextTick( function() {","    builder.emit( 'message', 'Starting to compile [%s] project.', builder.config.name );","","    builder.build( function( error, obj ) {","","      // Special Handlers","      // builder.use( require( './handlers/libs' ) );","      // builder.use( require( './handlers/scripts' ) );","      // builder.use( require( './handlers/schemas' ) );","      // builder.use( require( './handlers/fonts' ) );","      // builder.use( require( './handlers/styles' ) );","","      if( error ) {","        return builder.emit( 'error', 'Fatail error during [%s] build: [%s].', builder.config.name, error.message );","      } else {","        builder.emit( 'message', 'Build of [%s] complete.', builder.config.name );","      }","","    } );","","  });","","  return builder;","","}","","/**"," * Instance Properties."," *"," */","Object.defineProperties( Builder.prototype, {","  buildAsset: {","    /**","     * Build asset `type` and invoke `fn(err, paths)`.","     *","     * @param {String} type","     * @param {Function} fn","     * @api private","     */","    value: function buildAsset( type, fn ) {","      var Batch = require( 'batch' );","      var self = this;","      var conf = this.config;","      var batch = new Batch;","","      function normalize( name ) {","        return name.replace( '/', '-' );","      }","","      // self.emit( 'message', 'Prepare asset [%s] for building.', type );","","      // Build dependencies.","      if( self.hasDependencies() ) {","","        Object.keys( self.dependencies() ).forEach( function( dep ) {","          dep = normalize( dep );","","          // ignored","          if( self.ignoring( dep, type ) ) {","            return self.emit( 'ignoring %s', dep );","          }","","          // ignore it so we dont have dups","          self.ignore( dep, type );","","          // lookup dep","          batch.push( function( done ) {","            self.lookup( dep, function( err, dir ) {","              if( err ) {","                return done( err );","              }","              var builder = new Builder( dir, self );","              self.emit( 'dependency', builder );","              builder.buildAsset( type, done );","            } );","          } );","        } );","      }","","      // copy assets","      if( conf[type] ) {","","        conf[type].forEach( function( file ) {","          var path = self.path( file );","          var name = normalize( self.basename );","          var dest = join( self.assetsDest, name, file );","          batch.push( function( done ) {","            self.copyTo( path, dest, done );","          } );","        } );","      }","","      batch.end( function( err, res ) {","","        if( err ) {","          return fn( err );","        }","        fn( null, res );","      } );","","    },","    enumerable: true","  },","  json: {","    /**","     * Return the configuration JSON.","     *","     * @return {Object}","     * @api public","     */","    value: function json() {","      var fs = require( 'fs' );","      var read = fs.readFileSync;","      var path = this.path( 'component.json' ) || this.path( 'package.json' ) || this.path( 'composer.json' );","      var str = read( path, 'utf8' );","","      try {","        var obj = JSON.parse( str );","      } catch( err ) {","        err.message += ' in ' + path;","        throw err;","      }","","      if( obj.main ) {","        obj.main = obj.main.replace( /^\\.\\//, '' );","      }","","      return obj;","","    },","    enumerable: true","  },","  buildLibs: {","    /**","     * buildLibs.","     *","     * @return {Object}","     * @api public","     */","    value: function buildLibs( fn ) {","      // Must use buildType and not buildAsset, don't know why really","      this.buildType( 'libs', fn );","    },","    enumerable: true","  },","  buildSchemas: {","    /**","     * buildSchemas.","     *","     * @return {Object}","     * @api public","     */","    value: function buildSchemas( fn ) {","      this.buildType( 'schemas', fn );","    },","    enumerable: true","  },","  build: {","    /**","     * Build and invoke `fn(err, res)`, where `res`","     * is an object containing:","     *","     *  - `css`","     *  - `js`","     *  - `images`","     *  - `fonts`","     *  - `files`","     *","     * NOTE: Batch maintains result ordering (res.shift()s here)","     *","     * @param {Function} fn","     * @api public","     */","    value: function build( fn ) {","      // this.emit( 'message', 'Building.' );","","      function empty( s ) {","        return '' != s;","      }","","      var builder = this;","      var requirejs = require( 'component-require' );","      var Batch = require( 'batch' );","      var batch = new Batch;","","      batch.push( this.buildScripts.bind( this ) );","      batch.push( this.buildTemplates.bind( this ) );","      batch.push( this.buildAliases.bind( this ) );","      //batch.push( this.buildLibs.bind( this ) );","      batch.push( this.buildStyles.bind( this ) );","      batch.push( this.buildImages.bind( this ) );","      batch.push( this.buildFonts.bind( this ) );","      batch.push( this.buildFiles.bind( this ) );","","      batch.end( function( err, res ) {","","        return console.log( \"\\n------------\\n\", builder .config.name, res );","","        if( err ) {","          return fn( err );","        }","","        var scripts = res.shift();","        var require = res.shift();","        var templates = res.shift();","        var custom = builder._js;","","        fn( null, {","          js: [","            scripts,","            require,","            templates,","            custom","          ].filter( empty ).join( '\\n' ),","          //libs: res.shift(),","          css: res.shift(),","          images: res.shift(),","          fonts: res.shift(),","          files: res.shift(),","          require: requirejs","        } );","","","      } );","","    },","    enumerable: true","  },","  __super: {","    value: require( 'component-builder' ),","    enumerable: false","  }","} );","","/**"," * Constructor Properties."," *"," */","Object.defineProperties( module.exports = Builder, {","  upm: {","    value: require( '../upm' ),","    enumerable: false,","    configurable: true","  },","  utility: {","    value: require( '../utility' ),","    enumerable: false,","    configurable: true","  }","} );","",""];
