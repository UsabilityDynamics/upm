/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['compiler/handlers/libs.js']) {
  _$jscoverage['compiler/handlers/libs.js'] = [];
  _$jscoverage['compiler/handlers/libs.js'][6] = 0;
  _$jscoverage['compiler/handlers/libs.js'][7] = 0;
  _$jscoverage['compiler/handlers/libs.js'][8] = 0;
  _$jscoverage['compiler/handlers/libs.js'][9] = 0;
  _$jscoverage['compiler/handlers/libs.js'][10] = 0;
  _$jscoverage['compiler/handlers/libs.js'][11] = 0;
  _$jscoverage['compiler/handlers/libs.js'][12] = 0;
  _$jscoverage['compiler/handlers/libs.js'][13] = 0;
  _$jscoverage['compiler/handlers/libs.js'][14] = 0;
  _$jscoverage['compiler/handlers/libs.js'][15] = 0;
  _$jscoverage['compiler/handlers/libs.js'][16] = 0;
  _$jscoverage['compiler/handlers/libs.js'][18] = 0;
  _$jscoverage['compiler/handlers/libs.js'][19] = 0;
  _$jscoverage['compiler/handlers/libs.js'][22] = 0;
  _$jscoverage['compiler/handlers/libs.js'][23] = 0;
  _$jscoverage['compiler/handlers/libs.js'][27] = 0;
  _$jscoverage['compiler/handlers/libs.js'][28] = 0;
  _$jscoverage['compiler/handlers/libs.js'][32] = 0;
  _$jscoverage['compiler/handlers/libs.js'][34] = 0;
  _$jscoverage['compiler/handlers/libs.js'][35] = 0;
  _$jscoverage['compiler/handlers/libs.js'][41] = 0;
  _$jscoverage['compiler/handlers/libs.js'][44] = 0;
  _$jscoverage['compiler/handlers/libs.js'][47] = 0;
  _$jscoverage['compiler/handlers/libs.js'][50] = 0;
  _$jscoverage['compiler/handlers/libs.js'][51] = 0;
  _$jscoverage['compiler/handlers/libs.js'][52] = 0;
  _$jscoverage['compiler/handlers/libs.js'][60] = 0;
  _$jscoverage['compiler/handlers/libs.js'][62] = 0;
  _$jscoverage['compiler/handlers/libs.js'][68] = 0;
  _$jscoverage['compiler/handlers/libs.js'][69] = 0;
}
_$jscoverage['compiler/handlers/libs.js'][6]++;
module.exports = (function build(builder) {
  _$jscoverage['compiler/handlers/libs.js'][7]++;
  var self = this;
  _$jscoverage['compiler/handlers/libs.js'][8]++;
  var extname = require("path").extname;
  _$jscoverage['compiler/handlers/libs.js'][9]++;
  var basename = require("path").basename;
  _$jscoverage['compiler/handlers/libs.js'][10]++;
  var resolve = require("path").resolve;
  _$jscoverage['compiler/handlers/libs.js'][11]++;
  var join_path = require("path").join;
  _$jscoverage['compiler/handlers/libs.js'][12]++;
  var Batch = require("batch");
  _$jscoverage['compiler/handlers/libs.js'][13]++;
  var fs = require("fs");
  _$jscoverage['compiler/handlers/libs.js'][14]++;
  var read = fs.readFileSync;
  _$jscoverage['compiler/handlers/libs.js'][15]++;
  var mkdir = require("mkdirp");
  _$jscoverage['compiler/handlers/libs.js'][16]++;
  var component = builder.config;
  _$jscoverage['compiler/handlers/libs.js'][18]++;
  builder.hook("before libs", (function (pkg, next) {
  _$jscoverage['compiler/handlers/libs.js'][19]++;
  var batch = new Batch();
  _$jscoverage['compiler/handlers/libs.js'][22]++;
  if (! pkg.config.libs) {
    _$jscoverage['compiler/handlers/libs.js'][23]++;
    return next();
  }
  _$jscoverage['compiler/handlers/libs.js'][27]++;
  var files = pkg.config.libs.filter((function (file) {
  _$jscoverage['compiler/handlers/libs.js'][28]++;
  return extname(file) == ".php";
}));
  _$jscoverage['compiler/handlers/libs.js'][32]++;
  mkdir(resolve(component.build.libs.out), (function (error) {
  _$jscoverage['compiler/handlers/libs.js'][34]++;
  if (error) {
    _$jscoverage['compiler/handlers/libs.js'][35]++;
    builder.emit("error", "PHP Lib Build failed when trying to create directory: [%s]".error.message);
  }
}));
  _$jscoverage['compiler/handlers/libs.js'][41]++;
  files.forEach((function (filename) {
  _$jscoverage['compiler/handlers/libs.js'][44]++;
  batch.push((function (done) {
  _$jscoverage['compiler/handlers/libs.js'][47]++;
  pkg.removeFile("libs", filename);
  _$jscoverage['compiler/handlers/libs.js'][50]++;
  fs.writeFile(resolve(join_path(component.build.libs.out, basename(filename))), read(pkg.path(filename), "utf-8"), (function (error) {
  _$jscoverage['compiler/handlers/libs.js'][51]++;
  if (error) {
  }
  _$jscoverage['compiler/handlers/libs.js'][52]++;
  done(error);
}));
}));
}));
  _$jscoverage['compiler/handlers/libs.js'][60]++;
  batch.end((function done() {
  _$jscoverage['compiler/handlers/libs.js'][62]++;
  next();
}));
}));
  _$jscoverage['compiler/handlers/libs.js'][68]++;
  builder.build((function complete(error, obj) {
  _$jscoverage['compiler/handlers/libs.js'][69]++;
  builder.emit("verbose", "Libraries for [%s] built.", builder.config.name);
}));
});
_$jscoverage['compiler/handlers/libs.js'].source = ["/**"," * Build PHP"," *"," * @param builder"," */","module.exports = function build( builder ) {","  var self = this;","  var extname = require( 'path' ).extname;","  var basename = require( 'path' ).basename;","  var resolve = require( 'path' ).resolve;","  var join_path = require( 'path' ).join;","  var Batch = require( 'batch' );","  var fs = require( 'fs' );","  var read = fs.readFileSync;","  var mkdir = require( 'mkdirp' );","  var component = builder.config;","","  builder.hook( 'before libs', function( pkg, next ) {","    var batch   = new Batch;","","    // Check if package has libs.","    if( !pkg.config.libs ) {","      return next();","    }","","    // Find matching files by extension.","    var files = pkg.config.libs.filter( function( file ) {","      return extname( file ) == '.php';","    });","","    // Create Directory.","    mkdir( resolve( component.build.libs.out ), function( error ) {","","      if( error ) {","        builder.emit( 'error', 'PHP Lib Build failed when trying to create directory: [%s]'. error.message );","      }","","    });","","    // Iterate through files.","    files.forEach( function( filename ) {","      // console.log( \"Compiling PHP File: \" + filename );","","      batch.push( function( done ) {","","        // Remove PHP file from script build.","        pkg.removeFile( 'libs', filename );","","        // Write file.","        fs.writeFile( resolve( join_path( component.build.libs.out, basename( filename ) ) ), read( pkg.path( filename ), 'utf-8' ), function( error ) {","          if( error ) {}","          done( error );","        });","","      });","","    });","","    // Batch done.","    batch.end( function done() {","      // builder.emit( 'message', 'PHP Build complete.' );","      next();","    });","","  });","","  // Build Handler.","  builder.build( function complete( error, obj ) {","    builder.emit( 'verbose', 'Libraries for [%s] built.', builder.config.name );","  });","","}"];
