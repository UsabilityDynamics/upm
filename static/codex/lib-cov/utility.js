/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['utility.js']) {
  _$jscoverage['utility.js'] = [];
  _$jscoverage['utility.js'][8] = 0;
  _$jscoverage['utility.js'][9] = 0;
  _$jscoverage['utility.js'][12] = 0;
  _$jscoverage['utility.js'][22] = 0;
  _$jscoverage['utility.js'][23] = 0;
  _$jscoverage['utility.js'][24] = 0;
  _$jscoverage['utility.js'][25] = 0;
  _$jscoverage['utility.js'][26] = 0;
  _$jscoverage['utility.js'][28] = 0;
  _$jscoverage['utility.js'][30] = 0;
  _$jscoverage['utility.js'][31] = 0;
  _$jscoverage['utility.js'][34] = 0;
  _$jscoverage['utility.js'][36] = 0;
  _$jscoverage['utility.js'][37] = 0;
  _$jscoverage['utility.js'][40] = 0;
  _$jscoverage['utility.js'][43] = 0;
  _$jscoverage['utility.js'][56] = 0;
  _$jscoverage['utility.js'][57] = 0;
  _$jscoverage['utility.js'][58] = 0;
  _$jscoverage['utility.js'][59] = 0;
  _$jscoverage['utility.js'][61] = 0;
  _$jscoverage['utility.js'][62] = 0;
  _$jscoverage['utility.js'][63] = 0;
  _$jscoverage['utility.js'][66] = 0;
  _$jscoverage['utility.js'][68] = 0;
  _$jscoverage['utility.js'][76] = 0;
  _$jscoverage['utility.js'][78] = 0;
  _$jscoverage['utility.js'][99] = 0;
  _$jscoverage['utility.js'][100] = 0;
  _$jscoverage['utility.js'][101] = 0;
  _$jscoverage['utility.js'][102] = 0;
  _$jscoverage['utility.js'][113] = 0;
  _$jscoverage['utility.js'][114] = 0;
  _$jscoverage['utility.js'][115] = 0;
  _$jscoverage['utility.js'][116] = 0;
  _$jscoverage['utility.js'][117] = 0;
  _$jscoverage['utility.js'][128] = 0;
  _$jscoverage['utility.js'][138] = 0;
  _$jscoverage['utility.js'][139] = 0;
  _$jscoverage['utility.js'][140] = 0;
  _$jscoverage['utility.js'][141] = 0;
  _$jscoverage['utility.js'][142] = 0;
  _$jscoverage['utility.js'][169] = 0;
  _$jscoverage['utility.js'][171] = 0;
  _$jscoverage['utility.js'][172] = 0;
  _$jscoverage['utility.js'][177] = 0;
  _$jscoverage['utility.js'][192] = 0;
  _$jscoverage['utility.js'][193] = 0;
  _$jscoverage['utility.js'][194] = 0;
  _$jscoverage['utility.js'][195] = 0;
  _$jscoverage['utility.js'][196] = 0;
  _$jscoverage['utility.js'][198] = 0;
  _$jscoverage['utility.js'][199] = 0;
  _$jscoverage['utility.js'][202] = 0;
  _$jscoverage['utility.js'][204] = 0;
  _$jscoverage['utility.js'][205] = 0;
  _$jscoverage['utility.js'][208] = 0;
  _$jscoverage['utility.js'][210] = 0;
  _$jscoverage['utility.js'][211] = 0;
  _$jscoverage['utility.js'][214] = 0;
  _$jscoverage['utility.js'][217] = 0;
  _$jscoverage['utility.js'][226] = 0;
  _$jscoverage['utility.js'][227] = 0;
  _$jscoverage['utility.js'][229] = 0;
  _$jscoverage['utility.js'][230] = 0;
}
_$jscoverage['utility.js'][8]++;
function Utility() {
  _$jscoverage['utility.js'][9]++;
  return Object.keys(arguments)? require("lodash").pick.apply(null, [Utility, Array.prototype.slice.call(arguments)]): Utility;
}
_$jscoverage['utility.js'][12]++;
Object.defineProperties(module.exports = Utility, {is_writable: {value: (function is_writable(target) {
  _$jscoverage['utility.js'][22]++;
  var path = require("path");
  _$jscoverage['utility.js'][23]++;
  var fs = require("fs");
  _$jscoverage['utility.js'][24]++;
  var resolve = require("path").resolve;
  _$jscoverage['utility.js'][25]++;
  var exists = fs.existsSync;
  _$jscoverage['utility.js'][26]++;
  var path = undefined;
  _$jscoverage['utility.js'][28]++;
  try {
    _$jscoverage['utility.js'][30]++;
    if (! target) {
      _$jscoverage['utility.js'][31]++;
      throw new Error();
    }
    _$jscoverage['utility.js'][34]++;
    path = resolve(target);
    _$jscoverage['utility.js'][36]++;
    if (! exists(path)) {
      _$jscoverage['utility.js'][37]++;
      throw new Error();
    }
    _$jscoverage['utility.js'][40]++;
    return path;
  }
  catch (error) {
    _$jscoverage['utility.js'][43]++;
    return false;
  }
}), enumerable: true}, get_namespace: {value: (function get_namespace(config) {
  _$jscoverage['utility.js'][56]++;
  var url = require("url");
  _$jscoverage['utility.js'][57]++;
  var parse = url.parse;
  _$jscoverage['utility.js'][58]++;
  var pathname = undefined;
  _$jscoverage['utility.js'][59]++;
  var parts = [];
  _$jscoverage['utility.js'][61]++;
  if (config.repository.url) {
    _$jscoverage['utility.js'][62]++;
    var pathname = config.repository? parse(config.repository.url.toLowerCase()).pathname: config.repo.toLowerCase();
    _$jscoverage['utility.js'][63]++;
    var parts = pathname.split("/");
  }
  _$jscoverage['utility.js'][66]++;
  if (parts.length === 3) {
    _$jscoverage['utility.js'][68]++;
    return ({vendor: parts[1], package: parts[2], namespace: config.config.namespace || parts[1]});
  }
  _$jscoverage['utility.js'][76]++;
  if (parts.length === 2) {
    _$jscoverage['utility.js'][78]++;
    return ({vendor: parts[0], package: parts[1], namespace: config.config.namespace || parts[0]});
  }
}), enumerable: true}, console: {value: {fatal: (function () {
  _$jscoverage['utility.js'][99]++;
  console.error();
  _$jscoverage['utility.js'][100]++;
  Utility.console.error.apply(null, arguments);
  _$jscoverage['utility.js'][101]++;
  console.error();
  _$jscoverage['utility.js'][102]++;
  process.exit(1);
}), log: (function (type, msg, color) {
  _$jscoverage['utility.js'][113]++;
  color = color || "36";
  _$jscoverage['utility.js'][114]++;
  var w = 10;
  _$jscoverage['utility.js'][115]++;
  var len = Math.max(0, w - type.length);
  _$jscoverage['utility.js'][116]++;
  var pad = Array(len + 1).join(" ");
  _$jscoverage['utility.js'][117]++;
  console.log("  \u001b[" + color + "m%s\u001b[m : \u001b[90m%s\u001b[m", pad + type, msg);
}), warn: (function (type, msg) {
  _$jscoverage['utility.js'][128]++;
  Utility.console.log(type, msg, "33");
}), error: (function (msg) {
  _$jscoverage['utility.js'][138]++;
  var w = 10;
  _$jscoverage['utility.js'][139]++;
  var type = "error";
  _$jscoverage['utility.js'][140]++;
  var len = Math.max(0, w - type.length);
  _$jscoverage['utility.js'][141]++;
  var pad = Array(len + 1).join(" ");
  _$jscoverage['utility.js'][142]++;
  console.error("  \u001b[31m%s\u001b[m : \u001b[90m%s\u001b[m", pad + type, msg);
})}, configurable: false, enumerable: true, writable: true}, merge: {value: (function merge(a, b) {
  _$jscoverage['utility.js'][169]++;
  if (a && b) {
    _$jscoverage['utility.js'][171]++;
    for (var key in b) {
      _$jscoverage['utility.js'][172]++;
      a[key] = b[key];
}
  }
  _$jscoverage['utility.js'][177]++;
  return a;
}), configurable: false, enumerable: true, writable: true}, resolve: {value: (function resolve(target) {
  _$jscoverage['utility.js'][192]++;
  var args = Array.prototype.slice.call(arguments);
  _$jscoverage['utility.js'][193]++;
  var fs = require("fs");
  _$jscoverage['utility.js'][194]++;
  var resolve = require("path").resolve;
  _$jscoverage['utility.js'][195]++;
  var exists = fs.existsSync;
  _$jscoverage['utility.js'][196]++;
  var path = undefined;
  _$jscoverage['utility.js'][198]++;
  if (args.length > 1) {
    _$jscoverage['utility.js'][199]++;
    target = args.join(require("path").sep);
  }
  _$jscoverage['utility.js'][202]++;
  try {
    _$jscoverage['utility.js'][204]++;
    if (! target) {
      _$jscoverage['utility.js'][205]++;
      throw new Error();
    }
    _$jscoverage['utility.js'][208]++;
    path = resolve(target);
    _$jscoverage['utility.js'][210]++;
    if (! exists(path)) {
      _$jscoverage['utility.js'][211]++;
      throw new Error();
    }
    _$jscoverage['utility.js'][214]++;
    return path;
  }
  catch (error) {
    _$jscoverage['utility.js'][217]++;
    return false;
  }
}), enumerable: true}, normalize: {value: (function normalize(deps) {
  _$jscoverage['utility.js'][226]++;
  if (! deps || ! Object.keys(deps)) {
    _$jscoverage['utility.js'][227]++;
    return ({});
  }
  _$jscoverage['utility.js'][229]++;
  return Object.keys(deps).map((function (name) {
  _$jscoverage['utility.js'][230]++;
  return name + "@" + deps[name];
}));
}), enumerable: true}});
_$jscoverage['utility.js'].source = ["/**"," * Helper Utility for UPM"," *"," * @for upm"," * @module UPM"," * @author potanin@UD"," */","function Utility() {","  return Object.keys( arguments ) ? require( 'lodash' ).pick.apply( null, [ Utility, Array.prototype.slice.call( arguments ) ] ) : Utility;","}","","Object.defineProperties( module.exports = Utility, {","  is_writable: {","    /**","     * Test if Target is Writable","     *","     * @param target","     * @returns {*}","     */","    value: function is_writable( target ) {","","      var path = require( 'path' );","      var fs = require( 'fs' );","      var resolve = require( 'path' ).resolve;","      var exists = fs.existsSync;","      var path = undefined;","","      try {","","        if( !target ) {","          throw new Error;","        }","","        path = resolve( target );","","        if( !exists( path ) ) {","          throw new Error;","        }","","        return path;","","      } catch( error ) {","        return false;","      }","","    },","    enumerable: true","  },","  get_namespace: {","    /**","     * Get Namespace/Vendor name from repository","     *","     * @param repository","     */","    value: function get_namespace( config ) {","      var url = require( 'url' );","      var parse = url.parse;","      var pathname = undefined;","      var parts = [];","","      if( config.repository.url ) {","        var pathname = config.repository ? parse( config.repository.url.toLowerCase() ).pathname : config.repo.toLowerCase();","        var parts = pathname.split( '/' );","      }","","      if( parts.length === 3 ) {","","        return {","          vendor: parts[1],","          package: parts[2],","          namespace: config.config['namespace'] || parts[1]","        };","","      }","","      if( parts.length === 2 ) {","","        return {","          vendor: parts[0],","          package: parts[1],","          namespace: config.config['namespace'] || parts[0]","        };","","      }","","    },","    enumerable: true","  },","  console: {","    value: {","","      /**","       * Output fatal error message and exit.","       *","       * @param {String} msg","       * @api private","       */","      fatal: function() {","        console.error();","        Utility.console.error.apply( null, arguments );","        console.error();","        process.exit( 1 );","      },","","      /**","       * Log the given `type` with `msg`.","       *","       * @param {String} type","       * @param {String} msg","       * @api public","       */","      log: function( type, msg, color ) {","        color = color || '36';","        var w = 10;","        var len = Math.max( 0, w - type.length );","        var pad = Array( len + 1 ).join( ' ' );","        console.log( '  \\033[' + color + 'm%s\\033[m : \\033[90m%s\\033[m', pad + type, msg );","      },","","      /**","       * Log warning message with `type` and `msg`.","       *","       * @param {String} type","       * @param {String} msg","       * @api public","       */","      warn: function( type, msg ) {","        Utility.console.log( type, msg, '33' );","      },","","      /**","       * Output error message.","       *","       * @param {String} msg","       * @api private","       */","      error: function( msg ) {","        var w = 10;","        var type = 'error';","        var len = Math.max( 0, w - type.length );","        var pad = Array( len + 1 ).join( ' ' );","        console.error( '  \\033[31m%s\\033[m : \\033[90m%s\\033[m', pad + type, msg );","      }","","    },","    configurable: false,","    enumerable: true,","    writable: true","  },","  merge: {","    /**","     * Merge object b with object a.","     *","     * @example","     *     var a = { foo: 'bar' }","     *       , b = { bar: 'baz' };","     *","     *     utils.merge(a, b);","     *     // =&gt; { foo: 'bar', bar: 'baz' }","     *","     * @param {Object} a","     * @param {Object} b","     * @return {Object}","     *","     * @source connect","     */","    value: function merge( a, b ) {","","      if( a &amp;&amp; b ) {","","        for( var key in b ) {","          a[key] = b[key];","        }","","      }","","      return a;","","    },","    configurable: false,","    enumerable: true,","    writable: true","  },","  resolve: {","    /**","     *","     * @param target {String|Array}","     * @returns {*}","     */","    value: function resolve( target ) {","","      var args = Array.prototype.slice.call( arguments );","      var fs = require( 'fs' );","      var resolve = require( 'path' ).resolve;","      var exists = fs.existsSync;","      var path = undefined;","","      if( args.length &gt; 1 ) {","        target = args.join( require( 'path' ).sep );","      }","","      try {","","        if( !target ) {","          throw new Error;","        }","","        path = resolve( target );","","        if( !exists( path ) ) {","          throw new Error;","        }","","        return path;","","      } catch( error ) {","        return false;","      }","","    },","    enumerable: true","  },","  normalize: {","    value: function normalize( deps ) {","","      if( !deps || !Object.keys( deps ) ) {","        return {}","      }","      return Object.keys( deps ).map( function( name ) {","        return name + '@' + deps[name];","      } );","","    },","    enumerable: true","  },","} );"];
